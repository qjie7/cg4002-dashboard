[{"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/index.js":"1","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/App.js":"2","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Playground.js":"3","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Dancebase.js":"4","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Progress.js":"5","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Developer.js":"6","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/Sidebar.js":"7","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BasicTable/BasicTable.js":"8","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/DancerCard/DancerCard.js":"9","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Button/StartButton.js":"10","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/VideoCarousel.js":"11","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/SidebarData.js":"12","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/LineChart/LineChart.js":"13","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CircularProgressWithLabel/CircularProgressWithLabel.js":"14","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/Item.js":"15","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChart.js":"16","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Authenticate.js":"17","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/InputAdornments/InputAdornments.js":"18","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CustomizedSnackbars/CustomizedSnackbars.js":"19","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Cartoon/Cartoon.js":"20","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Home.js":"21","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Modal/Modal.js":"22","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SpeechBubble/SpeechBubble.js":"23","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialog.js":"24","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialogHome.js":"25","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Switch/OnOffSwitch.js":"26","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChartScore.js":"27","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SimpleCard/SimpleCard.js":"28"},{"size":215,"mtime":1612534896684,"results":"29","hashOfConfig":"30"},{"size":1443,"mtime":1614660535375,"results":"31","hashOfConfig":"30"},{"size":10047,"mtime":1616418944895,"results":"32","hashOfConfig":"30"},{"size":709,"mtime":1614395133566,"results":"33","hashOfConfig":"30"},{"size":4392,"mtime":1616388433832,"results":"34","hashOfConfig":"30"},{"size":29412,"mtime":1617110158621,"results":"35","hashOfConfig":"30"},{"size":1045,"mtime":1614661782405,"results":"36","hashOfConfig":"30"},{"size":2002,"mtime":1614661185020,"results":"37","hashOfConfig":"30"},{"size":1571,"mtime":1616406818528,"results":"38","hashOfConfig":"30"},{"size":573,"mtime":1612845180559,"results":"39","hashOfConfig":"30"},{"size":7490,"mtime":1614661999927,"results":"40","hashOfConfig":"30"},{"size":814,"mtime":1614661896346,"results":"41","hashOfConfig":"30"},{"size":959,"mtime":1616388411058,"results":"42","hashOfConfig":"30"},{"size":1362,"mtime":1613797732387,"results":"43","hashOfConfig":"30"},{"size":248,"mtime":1612668085315,"results":"44","hashOfConfig":"30"},{"size":2290,"mtime":1615951382844,"results":"45","hashOfConfig":"30"},{"size":1501,"mtime":1614662065893,"results":"46","hashOfConfig":"30"},{"size":4071,"mtime":1614661686233,"results":"47","hashOfConfig":"30"},{"size":1403,"mtime":1614144248682,"results":"48","hashOfConfig":"30"},{"size":2455,"mtime":1614416519880,"results":"49","hashOfConfig":"30"},{"size":1228,"mtime":1614688295089,"results":"50","hashOfConfig":"30"},{"size":14408,"mtime":1616420246433,"results":"51","hashOfConfig":"30"},{"size":322,"mtime":1614406035800,"results":"52","hashOfConfig":"30"},{"size":1174,"mtime":1614661317023,"results":"53","hashOfConfig":"30"},{"size":2447,"mtime":1616387376937,"results":"54","hashOfConfig":"30"},{"size":3641,"mtime":1614482873348,"results":"55","hashOfConfig":"30"},{"size":2324,"mtime":1614661150575,"results":"56","hashOfConfig":"30"},{"size":1118,"mtime":1614689838853,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1kb4at2",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/index.js",[],["125","126"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/App.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Playground.js",["127","128","129","130"],"import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { Grid, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Button from '@material-ui/core/Button'\nimport Backdrop from '@material-ui/core/Backdrop'\n\nimport io from 'socket.io-client'\nimport styled from 'styled-components'\n\nimport { Modal } from '../components/Modal/Modal'\nimport FormDialog from '../components/FormDialog/FormDialog'\nimport DancerCard from '../components/DancerCard/DancerCard'\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n    paddingRight: 33,\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n  heading: {\n    fontSize: '4.5em',\n    letterSpacing: '-1px',\n    backgroundColor: '#503e9d',\n    top: '0px',\n    color: 'white',\n  },\n}))\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 50px;\n  bottom: 50px;\n`\n\nconst socket = io('http://localhost:3000', {\n  transports: ['websocket', 'polling'],\n})\n\nfunction Playground() {\n  const classes = useStyles()\n  // const [danceMove, setDanceMove] = useState('Dab')\n  // const [danceMove2, setDanceMove2] = useState('Dab')\n  // const [danceMove3, setDanceMove3] = useState('Dab')\n  const [finalDanceMove, setFinalDanceMove] = useState('nothing')\n  const [finalPosition, setFinalPosition] = useState('1 2 3')\n  // const [position, setPosition] = useState([1, 2, 3])\n  // const [position2, setPosition2] = useState([1, 2, 3])\n  // const [position3, setPosition3] = useState([1, 2, 3])\n  // const [accuracy, setAccuracy] = useState(0)\n  // const [accuracy2, setAccuracy2] = useState(0)\n  // const [accuracy3, setAccuracy3] = useState(0)\n  // const [accuracyAvg, setAccuracyAvg] = useState(0)\n  const [finalSync, setFinalSync] = useState('0')\n  // const [sync, setSync] = useState(0)\n  // const [sync2, setSync2] = useState(0)\n  // const [sync3, setSync3] = useState(0)\n  const [syncAvg, setSyncAvg] = useState(0)\n\n  const [showModal, setShowModal] = useState(false)\n\n  const openModal = () => {\n    setShowModal((prev) => !prev)\n  }\n  const [connection, setConnection] = useState(false)\n\n  const handleConnection = () => {\n    if (connection) {\n      // const accuracySum = accuracyList.reduce((a, b) => a + b, 0)\n      // const accuracyAvg = accuracySum / accuracyList.length || 0\n      // setAccuracyAvg(accuracyAvg)\n\n      const syncSum = syncListFloat.reduce((a, b) => a + b, 0)\n\n      // const syncAvg = syncSum / syncList.length || 0\n      const syncAvg = syncSum / syncList.length || 0\n      setSyncAvg(syncAvg)\n    }\n    connection ? setConnection(false) : setConnection(true)\n    connection ? setShowModal(true) : setShowModal(false)\n  }\n\n  const [open, setOpen] = React.useState(false)\n  const handleClickOpen = () => {\n    setOpen(true)\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const [open2, setOpen2] = React.useState(false)\n  const handleClickOpen2 = () => {\n    setOpen2(true)\n  }\n  const handleClose2 = () => {\n    setOpen2(false)\n  }\n\n  const [open3, setOpen3] = React.useState(false)\n  const handleClickOpen3 = () => {\n    setOpen3(true)\n  }\n  const handleClose3 = () => {\n    setOpen3(false)\n  }\n\n  function handleLeaderNameChange(e) {\n    console.log(e.target.value)\n    localStorage.setItem('leaderName', e.target.value)\n  }\n\n  function handleMember1NameChange(e) {\n    console.log(e.target.value)\n    localStorage.setItem('member1Name', e.target.value)\n  }\n\n  function handleMember2NameChange(e) {\n    console.log(e.target.value)\n    localStorage.setItem('member2Name', e.target.value)\n  }\n\n  const [groupName, setGroupName] = useState('Group Name')\n  const [leaderName, setLeaderName] = useState('Leader Name')\n  const [member1Name, setMember1Name] = useState('Member 1 Name')\n  const [member2Name, setMember2Name] = useState('Member 2 Name')\n\n  useEffect(() => {\n    setGroupName(localStorage.getItem('groupName'))\n    setLeaderName(localStorage.getItem('leaderName'))\n    setMember1Name(localStorage.getItem('member1Name'))\n    setMember2Name(localStorage.getItem('member2Name'))\n  })\n\n  const [score, setScore] = useState(0)\n  const [testLog, setTestLog] = useState({\n    danceMove: 'Dab',\n    position1: 1,\n    position2: 2,\n    position3: 3,\n  })\n  const [correctness, setCorrectness] = useState(false)\n\n  // const [accuracyList, setAccuracyList] = useState([])\n  const [syncList, setSyncList] = useState([])\n\n  useEffect(() => {\n    if (connection) {\n      // socket.connect()\n      // if (connection && checked) {\n      // socket.on('new_data', (newData) => {\n      //   // setDanceMove(newData.danceMove)\n      //   // setPosition(newData.position)\n      //   // setAccuracy(newData.accuracy)\n      //   // setAccuracyList((oldList) => [...oldList, newData.accuracy])\n      //   setSync(newData.sync)\n      //   setSyncList((oldList) => [...oldList, newData.sync])\n      // })\n\n      // socket.on('new_data2', (newData) => {\n      //   setDanceMove2(newData.danceMove)\n      //   setPosition2(newData.position)\n      //   // setAccuracy2(newData.accuracy)\n      //   // setAccuracyList2((oldList) => [...oldList, newData.accuracy])\n      //   setSync2(newData.sync)\n      //   // setSyncList2((oldList) => [...oldList, newData.sync])\n      // })\n\n      // socket.on('new_data3', (newData) => {\n      //   setDanceMove3(newData.danceMove)\n      //   setPosition3(newData.position)\n      //   // setAccuracy3(newData.accuracy)\n      //   // setAccuracyList3((oldList) => [...oldList, newData.accuracy])\n      //   setSync3(newData.sync)\n      //   // setSyncList3((oldList) => [...oldList, newData.sync])\n      // })\n\n      socket.on('new_data4', (newData) => {\n        setFinalDanceMove(newData.finalDanceMove)\n        setFinalPosition(newData.finalPosition)\n        // setAccuracy3(newData.accuracy)\n        // setAccuracyList3((oldList) => [...oldList, newData.accuracy])\n        setFinalSync(newData.finalSync)\n        setSyncList((oldList) => [...oldList, newData.finalSync])\n      })\n\n      socket.on('test_log', (newData) => {\n        setTestLog(newData)\n      })\n    } else {\n      // socket.off('new_data')\n      // socket.off('new_data2')\n      // socket.off('new_data3')\n      socket.off('new_data4')\n      socket.off('test_log')\n    }\n  }, [connection])\n\n  useEffect(() => {\n    if (\n      // position1 === testLog.position1 &&\n      // position2 === testLog.position2 &&\n      // position3 === testLog.position3 &&\n      finalDanceMove === testLog.danceMove\n    ) {\n      setCorrectness(true)\n      if (score < 10) {\n        setScore((prevScore) => prevScore + 1)\n      }\n\n      console.log(score)\n    } else {\n      setCorrectness(false)\n    }\n  }, [finalDanceMove])\n\n  let syncListFloat = syncList.map(function (x) {\n    return parseFloat(x, 10)\n  })\n\n  // console.log(syncList)\n  // console.log(syncListFloat)\n  console.log(syncAvg)\n  return (\n    <>\n      <FormDialog\n        handleClickOpen={handleClickOpen}\n        handleClose={handleClose}\n        open={open}\n        setOpen={setOpen}\n        handleNameChange={handleMember1NameChange}\n      />\n\n      <FormDialog\n        handleClickOpen={handleClickOpen2}\n        handleClose={handleClose2}\n        open={open2}\n        setOpen={setOpen2}\n        handleNameChange={handleLeaderNameChange}\n      />\n\n      <FormDialog\n        handleClickOpen={handleClickOpen3}\n        handleClose={handleClose3}\n        open={open3}\n        setOpen={setOpen3}\n        handleNameChange={handleMember2NameChange}\n      />\n      <Grid container justify='center' style={{ marginTop: '-10px' }}>\n        <Grid item xs={12}>\n          <Typography variant='h3' align='center' className={classes.heading}>\n            {groupName}\n          </Typography>\n        </Grid>\n      </Grid>\n\n      <Grid container justify='center'>\n        <Grid item>\n          <DancerCard\n            name={member1Name}\n            position={finalPosition.substring(0, 1)}\n            userImage='6CgkUjUl4og'\n            danceMove={finalDanceMove}\n            handleClickOpen={handleClickOpen}\n            // accuracy={accuracy2}\n            sync={finalSync}\n          />\n        </Grid>\n\n        <Grid item>\n          <DancerCard\n            name={leaderName}\n            position={finalPosition.substring(2, 3)}\n            userImage='sibVwORYqs0'\n            danceMove={finalDanceMove}\n            role='Leader'\n            handleClickOpen={handleClickOpen2}\n            // accuracy={accuracy}\n            sync={finalSync}\n          />\n        </Grid>\n\n        <Grid item>\n          <DancerCard\n            name={member2Name}\n            position={finalPosition.substring(4)}\n            userImage='d2MSDujJl2g'\n            danceMove={finalDanceMove}\n            role='Member 2'\n            handleClickOpen={handleClickOpen3}\n            // accuracy={accuracy3}\n            sync={finalSync}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid container justify='center'>\n        <Grid item>\n          <Button\n            variant='contained'\n            color='secondary'\n            onClick={handleConnection}\n            className={classes.margin}\n          >\n            {connection ? <p>END</p> : <p>START</p>}\n          </Button>\n\n          <Container>\n            <Modal\n              showModal={showModal}\n              setShowModal={setShowModal}\n              score={score}\n              setScore={setScore}\n              // setAccuracyList={setAccuracyList}\n              // accuracyList={accuracyList}\n              // accuracyAvg={accuracyAvg}\n              setSyncList={setSyncList}\n              syncList={syncList}\n              syncAvg={syncAvg}\n            />\n          </Container>\n          <Backdrop\n            className={classes.backdrop}\n            open={connection ? !socket.connected : false}\n          >\n            <CircularProgress color='inherit' />\n          </Backdrop>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nexport default Playground\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Dancebase.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Progress.js",["131"],"import React from 'react'\nimport { Typography, Grid } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport LineChart from '../components/LineChart/LineChart'\nimport BarChartScore from '../components/BarChart/BarChartScore'\nimport { useState, useEffect } from 'react'\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    marginTop: 120,\n  },\n  heading: {\n    fontSize: '4.5em',\n    letterSpacing: '-1px',\n    backgroundColor: '#503e9d',\n    color: 'white',\n  },\n})\n\nfunction Progress({ borderColor }) {\n  const [oneScore, setOneScore] = useState(0)\n  const [twoScore, setTwoScore] = useState(0)\n  const [threeScore, setThreeScore] = useState(0)\n  const [fourScore, setFourScore] = useState(0)\n  const [fiveScore, setFiveScore] = useState(0)\n  const [sixScore, setSixScore] = useState(0)\n  const [sevenScore, setSevenScore] = useState(0)\n  const [eightScore, setEightScore] = useState(0)\n  const [nineScore, setNineScore] = useState(0)\n  const [tenScore, setTenScore] = useState(0)\n\n  const classes = useStyles()\n\n  useEffect(() => {\n    const oneValue = localStorage.getItem('oneScore')\n    if (oneValue) setOneScore(oneValue)\n\n    const twoValue = localStorage.getItem('twoScore')\n    if (twoValue) setTwoScore(twoValue)\n\n    const threeValue = localStorage.getItem('threeScore')\n    if (threeValue) setThreeScore(threeValue)\n\n    const fourValue = localStorage.getItem('fourScore')\n    if (fourValue) setFourScore(fourValue)\n\n    const fiveValue = localStorage.getItem('fiveScore')\n    if (fiveValue) setFiveScore(fiveValue)\n\n    const sixValue = localStorage.getItem('sixScore')\n    if (sixValue) setSixScore(sixValue)\n\n    const sevenValue = localStorage.getItem('sevenScore')\n    if (sevenValue) setSevenScore(sevenValue)\n\n    const eightValue = localStorage.getItem('eightScore')\n    if (eightValue) setEightScore(eightValue)\n\n    const nineValue = localStorage.getItem('nineScore')\n    if (nineValue) setNineScore(nineValue)\n\n    const tenValue = localStorage.getItem('tenScore')\n    if (tenValue) setTenScore(tenValue)\n  }, [])\n\n  return (\n    <>\n      <Grid container justify='center' style={{ marginTop: '-10px' }}>\n        <Grid item xs={12} style={{ width: '100%' }}>\n          <Typography variant='h3' align='center' className={classes.heading}>\n            {' '}\n            Progress\n          </Typography>\n        </Grid>\n      </Grid>\n\n      <Grid container spacing={3} direction='column'>\n        <Grid container item xs={12} spacing={3} marginLeft='100px'>\n          <Grid item xs={12}>\n            <BarChartScore\n              oneScore={oneScore > 0 ? oneScore - 1 : oneScore}\n              twoScore={twoScore > 0 ? twoScore - 1 : twoScore}\n              threeScore={threeScore > 0 ? threeScore - 1 : threeScore}\n              fourScore={fourScore > 0 ? fourScore - 1 : fourScore}\n              fiveScore={fiveScore > 0 ? fiveScore - 1 : fiveScore}\n              sixScore={sixScore > 0 ? sixScore - 1 : sixScore}\n              sevenScore={sevenScore > 0 ? sevenScore - 1 : sevenScore}\n              eightScore={eightScore > 0 ? eightScore - 1 : eightScore}\n              nineScore={nineScore > 0 ? nineScore - 1 : nineScore}\n              tenScore={tenScore > 0 ? tenScore - 1 : tenScore}\n            />\n          </Grid>\n        </Grid>\n\n        <Grid container item xs={12} spacing={3} width={100}>\n          <Grid item xs={12}>\n            <LineChart\n              data={JSON.parse(localStorage.getItem('syncDatas'))}\n              time={JSON.parse(localStorage.getItem('time'))}\n              text='Sync Overtime'\n              label='Sync'\n              borderColor='rgba(23,100,111,4)'\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nexport default Progress\n\n{\n  /* <Grid container direction='column' item xs={12} spacing={3}>\n <Grid xs={6} item>\n  <LineChart\n    data={JSON.parse(localStorage.getItem('accuracyDatas'))}\n    time={JSON.parse(localStorage.getItem('time'))}\n    text='Accuracy Overtime'\n    label='Accuracy'\n    borderColor='rgba(233,42,23,52)'\n  />\n</Grid>\n<Grid xs={12} item style={{ position: 'absolute' }}>\n  <LineChart\n    data={JSON.parse(localStorage.getItem('syncDatas'))}\n    time={JSON.parse(localStorage.getItem('time'))}\n    text='Sync Overtime'\n    label='Sync'\n    borderColor='rgba(23,100,111,4)'\n  />\n</Grid>\n</Grid> */\n}\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Developer.js",["132","133","134","135","136","137","138","139","140","141","142"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\nimport { Grid } from '@material-ui/core'\n\nimport io from 'socket.io-client'\nimport { useEffect, useState } from 'react'\nimport {\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n} from 'recharts'\nimport Button from '@material-ui/core/Button'\nimport SimpleCard from '../components/SimpleCard/SimpleCard'\nimport BasicTable from '../components/BasicTable/BasicTable'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport { FaPlay, FaPause } from 'react-icons/fa'\nimport { IconContext } from 'react-icons'\nimport MuiTooltip from '@material-ui/core/Tooltip'\nconst socket = io('http://localhost:3000', {\n  transports: ['websocket', 'polling'],\n})\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div\n      role='tabpanel'\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  )\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n  margin: {\n    margin: theme.spacing(1),\n    paddingRight: 20,\n  },\n  logout: {\n    margin: theme.spacing(1),\n    paddingRight: 33,\n    width: '100px',\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n  heading: {\n    fontSize: '4.5em',\n    letterSpacing: '-1px',\n    backgroundColor: '#503e9d',\n    color: 'white',\n  },\n}))\n\nexport default function Developer(props) {\n  const classes = useStyles()\n  const [value, setValue] = React.useState(0)\n  const { access } = props\n\n  const [data, setData] = useState([])\n  const [data2, setData2] = useState([])\n  const [data3, setData3] = useState([])\n\n  const [danceMove, setDanceMove] = useState('Dab')\n  const [danceMove2, setDanceMove2] = useState('Dab')\n  const [danceMove3, setDanceMove3] = useState('Dab')\n\n  // const [position, setPosition] = useState([1, 2, 3])\n  // const [position2, setPosition2] = useState([1, 2, 3])\n  // const [position3, setPosition3] = useState([1, 2, 3])\n\n  const [connection, setConnection] = useState(false)\n\n  const [leaderName, setLeaderName] = useState('Leader Name')\n  const [member1Name, setMember1Name] = useState('Member 1 Name')\n  const [member2Name, setMember2Name] = useState('Member 2 Name')\n\n  const [correctness, setCorrectness] = useState(false)\n  const handleConnection = () => {\n    connection ? setConnection(false) : setConnection(true)\n\n    console.log('clicked')\n  }\n\n  useEffect(() => {\n    setLeaderName(localStorage.getItem('leaderName'))\n    setMember1Name(localStorage.getItem('member1Name'))\n    setMember2Name(localStorage.getItem('member2Name'))\n  })\n\n  const handleAccess = () => {\n    access(false)\n  }\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue)\n  }\n\n  // const [testLog, setTestLog] = useState({\n  //   danceMove: 'Dab',\n  //   position1: 1,\n  //   position2: 2,\n  //   position3: 3,\n  // })\n\n  let currentDanceMove = danceMove\n  useEffect(() => {\n    if (connection) {\n      socket.on('new_data', (newData) => {\n        // console.log(newData)\n        console.log(newData.EMG)\n        // setData((currentData) => [...currentData, newData])\n        setData((currentData) => {\n          if (currentData.length === 20) {\n            currentData = currentData.slice(1)\n          }\n          return currentData.concat(newData)\n        })\n        // setPosition(newData.position)\n        setDanceMove(newData.danceMove)\n      })\n\n      socket.on('new_data2', (newData2) => {\n        // console.log(newData)\n        console.log(newData2.EMG)\n        // setData((currentData) => [...currentData, newData])\n        setData2((currentData) => {\n          if (currentData.length === 20) {\n            currentData = currentData.slice(1)\n          }\n          return currentData.concat(newData2)\n        })\n        // setPosition2(newData2.position)\n        setDanceMove2(newData2.danceMove)\n      })\n\n      socket.on('new_data3', (newData3) => {\n        // console.log(newData)\n        console.log(newData3.EMG)\n        // setData((currentData) => [...currentData, newData])\n        setData3((currentData) => {\n          if (currentData.length === 20) {\n            currentData = currentData.slice(1)\n          }\n          return currentData.concat(newData3)\n        })\n        // setPosition3(newData3.position)\n        setDanceMove3(newData3.danceMove)\n      })\n\n      // socket.on('test_log', (newData) => {\n      //   setTestLog(newData)\n      // })\n    } else {\n      socket.off('new_data')\n      socket.off('new_data2')\n      socket.off('new_data3')\n      // socket.off('test_log')\n    }\n  }, [connection])\n\n  // useEffect(() => {\n  //   if (currentDanceMove === testLog.danceMove) {\n  //     setCorrectness(true)\n  //   } else {\n  //     setCorrectness(false)\n  //   }\n  // })\n\n  return (\n    <>\n      <Grid container justify='center' style={{ marginTop: '-10px' }}>\n        <Grid item xs={12}>\n          <Typography variant='h3' align='center' className={classes.heading}>\n            {' '}\n            Developer Mode\n          </Typography>\n        </Grid>\n      </Grid>\n      <div className={classes.root}>\n        <AppBar position='static' color='default'>\n          <Tabs\n            value={value}\n            onChange={handleChange}\n            indicatorColor='primary'\n            textColor='primary'\n            variant='scrollable'\n            scrollButtons='auto'\n            aria-label='scrollable auto tabs example'\n          >\n            <Tab label='Member 1' {...a11yProps(0)} />\n            <Tab label='Leader' {...a11yProps(1)} />\n            <Tab label='Member 2' {...a11yProps(2)} />\n            <Tab label='EMG' {...a11yProps(3)} />\n            {/* <Tab label='Offline Analytics' {...a11yProps(4)} /> */}\n\n            <Grid container justify='flex-end'>\n              <MuiTooltip title='Connect/Disconnect'>\n                <IconButton\n                  aria-label='connect'\n                  className={classes.margin}\n                  size='large'\n                  onClick={handleConnection}\n                >\n                  {connection ? (\n                    <IconContext.Provider\n                      value={{ color: 'red', className: 'global-class-name' }}\n                    >\n                      <FaPause size={30} />\n                    </IconContext.Provider>\n                  ) : (\n                    <IconContext.Provider\n                      value={{ color: 'green', className: 'global-class-name' }}\n                    >\n                      <FaPlay size={30} />\n                    </IconContext.Provider>\n                  )}\n                </IconButton>\n              </MuiTooltip>\n\n              <Backdrop\n                className={classes.backdrop}\n                open={connection ? !socket.connected : false}\n              >\n                <CircularProgress color='inherit' />\n              </Backdrop>\n\n              <Button\n                variant='contained'\n                color='secondary'\n                onClick={handleAccess}\n                className={classes.logout}\n              >\n                Log out\n              </Button>\n            </Grid>\n          </Tabs>\n        </AppBar>\n        <TabPanel value={value} index={0}>\n          <>\n            <Grid container justify='space-between'>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'blue' }}>(Left) MPU </h1>\n\n                  <LineChart width={500} height={300} data={data2}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberOneLeftA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberOneLeftA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberOneLeftA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n\n                  <LineChart width={500} height={300} data={data2}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberOneLeftG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberOneLeftG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberOneLeftG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'red' }}>(Right) MPU </h1>\n\n                  <LineChart width={500} height={300} data={data2}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberOneRightA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberOneRightA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberOneRightA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data2}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberOneRightG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberOneRightG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberOneRightG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n            </Grid>\n          </>\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <>\n            <Grid container justify='space-between'>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'blue' }}>(Left) MPU </h1>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisLeaderLeftA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisLeaderLeftA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisLeaderLeftA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisLeaderLeftG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisLeaderLeftG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisLeaderLeftG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'red' }}>(Right) MPU </h1>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisLeaderRightA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisLeaderRightA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisLeaderRightA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisLeaderRightG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisLeaderRightG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisLeaderRightG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n            </Grid>\n          </>\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          <>\n            <Grid container justify='space-between'>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'blue' }}>(Left) MPU </h1>\n                  <LineChart width={500} height={300} data={data3}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberTwoLeftA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberTwoLeftA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberTwoLeftA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data3}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberTwoLeftG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberTwoLeftG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberTwoLeftG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'red' }}>(Right) MPU </h1>\n                  <LineChart width={500} height={300} data={data3}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberTwoRightA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberTwoRightA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberTwoRightA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data3}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberTwoRightG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberTwoRightG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberTwoRightG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n            </Grid>\n          </>\n        </TabPanel>\n        <TabPanel value={value} index={3}>\n          <LineChart\n            width={500}\n            height={300}\n            data={data}\n            style={{ marginLeft: '350px', marginTop: '120px' }}\n          >\n            <CartesianGrid strokeDasharray='3 3' />\n            <Tooltip />\n            {/* <Legend /> */}\n            <XAxis dataKey='time' />\n            <YAxis\n              label={{\n                value: 'EMG',\n                angle: -90,\n                position: 'middleLeft',\n              }}\n            />\n\n            <Line\n              name='EMG data'\n              type='linear'\n              dataKey='EMG'\n              stroke='#00b339'\n              isAnimationActive={false}\n            />\n            {/* <Line\n              name='x'\n              type='linear'\n              dataKey='xAxisEMG'\n              stroke='#820000'\n              isAnimationActive={false}\n            />\n            <Line\n              name='y'\n              type='linear'\n              dataKey='yAxisEMG'\n              stroke='#118200'\n              isAnimationActive={false}\n            />\n            <Line\n              name='z'\n              type='linear'\n              dataKey='zAxisEMG'\n              stroke='#000982'\n              isAnimationActive={false}\n            /> */}\n          </LineChart>\n        </TabPanel>\n        <TabPanel value={value} index={4}>\n          {/* <Typography variant='h3'>Test Log Received</Typography>\n\n          <Grid item style={{ justifyItems: 'center' }}>\n            <BasicTable\n              danceMove={testLog.danceMove}\n              position1={testLog.position1}\n              position2={testLog.position2}\n              position3={testLog.position3}\n              correctness={correctness}\n              member1Name={member1Name}\n              leaderName={leaderName}\n              member2Name={member2Name}\n            />\n          </Grid>\n\n          <Grid container justify='center' style={{ marginTop: '100px' }}>\n            <Grid item style={{ marginBottom: '25px' }}>\n              <Typography variant='h3'>Simulated Data</Typography>\n            </Grid>\n\n            <Grid container item justify='center'>\n              <Grid item>\n                <SimpleCard player={member1Name} danceMove={danceMove2} />\n              </Grid>\n              <Grid item>\n                <SimpleCard player={leaderName} danceMove={danceMove} />\n              </Grid>\n              <Grid item>\n                <SimpleCard player={member2Name} danceMove={danceMove3} />\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid container style={{ marginTop: '10px' }}>\n            <Grid container item justify='center'>\n              // Might need to change\n              <Grid item>\n                <SimpleCard player='' position={position[0]} />\n              </Grid>\n              <Grid item>\n                <SimpleCard player='' position={position[1]} />\n              </Grid>\n              <Grid item>\n                <SimpleCard player='' position={position[2]} />\n              </Grid>\n            </Grid>\n          </Grid> */}\n        </TabPanel>\n        <TabPanel value={value} index={5}>\n          Item Six\n        </TabPanel>\n        <TabPanel value={value} index={6}>\n          Item Seven\n        </TabPanel>\n      </div>\n    </>\n  )\n}\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/Sidebar.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BasicTable/BasicTable.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/DancerCard/DancerCard.js",["143"],"import React from 'react'\nimport './DancerCard.css'\nimport { Grid } from '@material-ui/core'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nfunction DancerCard(props) {\n  return (\n    <>\n      <div className='card'>\n        <Grid\n          style={{\n            width: '180px',\n            height: '100px',\n            position: 'relative',\n            left: '65px',\n          }}\n          className='card-image'\n          style={{\n            background: `url(https://source.unsplash.com/${props.userImage}/640x426)`,\n            backgroundSize: 'cover',\n          }}\n        >\n          {/* {' '}\n          <img className='card-image' src={props.userImage} alt='' /> */}\n        </Grid>\n\n        <div className='card-text'>\n          <Tooltip title='Edit Name'>\n            <h2 className='card-name' onClick={props.handleClickOpen}>\n              {props.name}\n            </h2>\n          </Tooltip>\n\n          <div className='card-dance-name'>{props.danceMove}</div>\n        </div>\n        <div className='card-stats'>\n          <div className='stat'>\n            {/* <div className='value'>{props.accuracy}%</div>\n            <div className='type'>Accuracy</div> */}\n          </div>\n          <div className='stat border'>\n            <div className='value'>{props.position}</div>\n            <div className='type'>Position</div>\n          </div>\n          <div className='stat'>\n            <div className='value'>{props.sync}%</div>\n            <div className='type'>Sync</div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default DancerCard\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Button/StartButton.js",[],["144","145"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/VideoCarousel.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/SidebarData.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/LineChart/LineChart.js",["146"],"import React, { useState, useEffect } from 'react'\nimport { Line } from 'react-chartjs-2'\n\nconst LineChart = ({ data, text, label, borderColor, time }) => {\n  const [lineData, setLineData] = useState({})\n  console.log(data)\n\n  const lineChart = () => {\n    setLineData({\n      labels: time,\n      datasets: [\n        {\n          label: label,\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: '#96a3ff',\n          borderColor: borderColor,\n          borderWidth: 2,\n          data: data,\n        },\n      ],\n    })\n  }\n\n  useEffect(() => {\n    lineChart()\n  }, [])\n\n  return (\n    <div style={{ width: '100%' }}>\n      <Line\n        data={lineData}\n        options={{\n          title: {\n            display: true,\n            text: text,\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: 'right',\n          },\n        }}\n      />\n    </div>\n  )\n}\n\nexport default LineChart\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CircularProgressWithLabel/CircularProgressWithLabel.js",[],["147","148"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/Item.js",[],["149","150"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChart.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Authenticate.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/InputAdornments/InputAdornments.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CustomizedSnackbars/CustomizedSnackbars.js",[],["151","152"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Cartoon/Cartoon.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Home.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Modal/Modal.js",["153","154","155","156","157","158","159","160","161","162","163","164","165","166"],"import React, { useRef, useEffect, useCallback } from 'react'\nimport { useSpring, animated } from 'react-spring'\nimport styled from 'styled-components'\nimport { MdClose } from 'react-icons/md'\nimport { Link } from 'react-router-dom'\nimport { useState } from 'react'\nimport Grid from '@material-ui/core/Grid'\n// import Snackbar from '@material-ui/core/Snackbar'\n// import MuiAlert from '@material-ui/lab/Alert'\n// import { makeStyles } from '@material-ui/core/styles'\n// function Alert(props) {\n//   return <MuiAlert elevation={6} variant='filled' {...props} />\n// }\n\nconst Background = styled.div`\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst ModalWrapper = styled.div`\n  width: 800px;\n  height: 500px;\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n  background: #fff;\n  color: #000;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  position: relative;\n  z-index: 10;\n  border-radius: 10px;\n`\n\nconst ModalImg = styled.img`\n  width: 100%;\n  height: 100%;\n  border-radius: 10px 0 0 10px;\n  background: #000;\n`\n\nconst ModalContentLeft = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flexstart;\n  align-items: center;\n  line-height: 1.8;\n  color: #141414;\n  p {\n    margin-bottom: 1rem;\n  }\n  button {\n    padding: 10px 24px;\n    background: #141414;\n    color: #fff;\n    border: none;\n  }\n`\nconst ModalContentRight = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  line-height: 1.8;\n  color: #141414;\n  p {\n    margin-bottom: 1rem;\n  }\n  button {\n    padding: 10px 24px;\n    background: #141414;\n    color: #fff;\n    border: none;\n  }\n`\n\nconst CloseModalButton = styled(MdClose)`\n  cursor: pointer;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 32px;\n  height: 32px;\n  padding: 0;\n  z-index: 10;\n`\n\n// const useStyles = makeStyles((theme) => ({\n//   alert: {\n//     width: '100%',\n//     marginLeft: '120px',\n//   },\n// }))\n\nexport const Modal = ({\n  showModal,\n  setShowModal,\n  score,\n  setScore,\n  // setAccuracyList,\n  // accuracyList,\n  accuracyAvg,\n  setSyncList,\n  syncList,\n  syncAvg,\n}) => {\n  const modalRef = useRef()\n\n  const animation = useSpring({\n    config: {\n      duration: 250,\n    },\n    opacity: showModal ? 1 : 0,\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`,\n  })\n\n  const closeModal = (e) => {\n    if (modalRef.current === e.target) {\n      // setAccuracyDatas((oldDatas) => [...oldDatas, Math.floor(accuracyAvg)])\n      // localStorage.setItem('accuracyDatas', JSON.stringify(accuracyDatas))\n\n      // setSyncDatas((oldDatas) => [...oldDatas, Math.floor(syncAvg)])\n      // localStorage.setItem('syncDatas', JSON.stringify(syncDatas))\n\n      // setTime((oldDatas) => [...oldDatas, new Date().toLocaleTimeString()])\n      // localStorage.setItem('time', JSON.stringify(time))\n\n      // if (score === 1) {\n      //   increaseOneScore()\n      // } else if (score === 2) {\n      //   increaseTwoScore()\n      // } else if (score === 3) {\n      //   increaseThreeScore()\n      // } else if (score === 4) {\n      //   increaseFourScore()\n      // } else if (score === 5) {\n      //   increaseFiveScore()\n      // } else if (score === 6) {\n      //   increaseSixScore()\n      // } else if (score === 7) {\n      //   increaseSevenScore()\n      // } else if (score === 8) {\n      //   increaseEightScore()\n      // } else if (score === 9) {\n      //   increaseNineScore()\n      // } else if (score === 10) {\n      //   increaseTenScore()\n      // }\n\n      setScore(0)\n      setShowModal(false)\n      setSaveStatus(false)\n    }\n  }\n  // const classes = useStyles()\n  const closeModalWithCross = () => {\n    // setAccuracyDatas((oldDatas) => [...oldDatas, Math.floor(accuracyAvg)])\n    // localStorage.setItem('accuracyDatas', JSON.stringify(accuracyDatas))\n\n    // setSyncDatas((oldDatas) => [...oldDatas, Math.floor(syncAvg)])\n    // localStorage.setItem('syncDatas', JSON.stringify(syncDatas))\n\n    // setTime((oldDatas) => [...oldDatas, new Date().toLocaleTimeString()])\n    // localStorage.setItem('time', JSON.stringify(time))\n    // if (score === 1) {\n    //   increaseOneScore()\n    // } else if (score === 2) {\n    //   increaseTwoScore()\n    // } else if (score === 3) {\n    //   increaseThreeScore()\n    // } else if (score === 4) {\n    //   increaseFourScore()\n    // } else if (score === 5) {\n    //   increaseFiveScore()\n    // } else if (score === 6) {\n    //   increaseSixScore()\n    // } else if (score === 7) {\n    //   increaseSevenScore()\n    // } else if (score === 8) {\n    //   increaseEightScore()\n    // } else if (score === 9) {\n    //   increaseNineScore()\n    // } else if (score === 10) {\n    //   increaseTenScore()\n    // }\n    setScore(0)\n    setShowModal(false)\n    setSaveStatus(false)\n  }\n  const [saveStatus, setSaveStatus] = React.useState(false)\n  // const handleClose = (event, reason) => {\n  //   if (reason === 'clickaway') {\n  //     return\n  //   }\n\n  //   setSaveStatus(true)\n  // }\n\n  const [oneScore, setOneScore] = useState(localStorage.getItem('oneScore'))\n  const [twoScore, setTwoScore] = useState(localStorage.getItem('twoScore'))\n  const [threeScore, setThreeScore] = useState(\n    localStorage.getItem('threeScore')\n  )\n  const [fourScore, setFourScore] = useState(localStorage.getItem('fourScore'))\n  const [fiveScore, setFiveScore] = useState(localStorage.getItem('fiveScore'))\n  const [sixScore, setSixScore] = useState(localStorage.getItem('sixScore'))\n  const [sevenScore, setSevenScore] = useState(\n    localStorage.getItem('sevenScore')\n  )\n  const [eightScore, setEightScore] = useState(\n    localStorage.getItem('eightScore')\n  )\n  const [nineScore, setNineScore] = useState(localStorage.getItem('nineScore'))\n  const [tenScore, setTenScore] = useState(localStorage.getItem('tenScore'))\n\n  // const [accuracyDatas, setAccuracyDatas] = useState(\n  //   JSON.parse(localStorage.getItem('accuracyDatas'))\n  // )\n  const [syncDatas, setSyncDatas] = useState(\n    JSON.parse(localStorage.getItem('syncDatas'))\n  )\n\n  const [time, setTime] = useState(JSON.parse(localStorage.getItem('time')))\n  const [flag, setFlag] = useState(true)\n\n  const increaseOneScore = () => {\n    setOneScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('oneScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseTwoScore = () => {\n    setTwoScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('twoScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseThreeScore = () => {\n    setThreeScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('threeScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseFourScore = () => {\n    setFourScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('fourScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseFiveScore = () => {\n    setFiveScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('fiveScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseSixScore = () => {\n    setSixScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('sixScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseSevenScore = () => {\n    setSevenScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('sevenScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseEightScore = () => {\n    setEightScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('eightScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseNineScore = () => {\n    setNineScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('nineScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseTenScore = () => {\n    setTenScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('tenScore', newScore)\n      return newScore\n    })\n  }\n\n  const keyPress = useCallback(\n    (e) => {\n      if (e.key === 'Escape' && showModal) {\n        setShowModal(false)\n        setScore(0)\n        console.log('I pressed')\n      }\n    },\n    [setShowModal, showModal]\n  )\n\n  // let btnRef = useRef()\n\n  const handleSaveButton = (e) => {\n    setSaveStatus(true)\n    // if (btnRef.current) {\n    //   btnRef.current.setAttribute('disabled', 'disabled')\n    // }\n\n    if (score === 1) {\n      increaseOneScore()\n    } else if (score === 2) {\n      increaseTwoScore()\n      // console.log(increaseTwoScore())\n    } else if (score === 3) {\n      increaseThreeScore()\n    } else if (score === 4) {\n      increaseFourScore()\n    } else if (score === 5) {\n      increaseFiveScore()\n    } else if (score === 6) {\n      increaseSixScore()\n    } else if (score === 7) {\n      increaseSevenScore()\n    } else if (score === 8) {\n      increaseEightScore()\n    } else if (score === 9) {\n      increaseNineScore()\n    } else if (score === 10) {\n      increaseTenScore()\n    }\n\n    // setAccuracyDatas((oldDatas) => [...oldDatas, Math.floor(accuracyAvg)])\n    // localStorage.setItem('accuracyDatas', JSON.stringify(accuracyDatas))\n\n    setSyncDatas((oldDatas) => [...oldDatas, syncAvg.toFixed(4)])\n    localStorage.setItem('syncDatas', JSON.stringify(syncDatas))\n\n    setTime((oldDatas) => [...oldDatas, new Date().toLocaleTimeString()])\n    localStorage.setItem('time', JSON.stringify(time))\n  }\n\n  // useEffect(() => {\n  //   setSaveStatus(true)\n  //   if (btnRef.current) {\n  //     btnRef.current.setAttribute('disabled', 'disabled')\n  //   }\n\n  //   if (score === 1) {\n  //     increaseOneScore()\n  //   } else if (score === 2) {\n  //     increaseTwoScore()\n  //   } else if (score === 3) {\n  //     increaseThreeScore()\n  //   } else if (score === 4) {\n  //     increaseFourScore()\n  //   } else if (score === 5) {\n  //     increaseFiveScore()\n  //   } else if (score === 6) {\n  //     increaseSixScore()\n  //   } else if (score === 7) {\n  //     increaseSevenScore()\n  //   } else if (score === 8) {\n  //     increaseEightScore()\n  //   } else if (score === 9) {\n  //     increaseNineScore()\n  //   } else if (score === 10) {\n  //     increaseTenScore()\n  //   }\n\n  //   setAccuracyDatas((oldDatas) => [...oldDatas, Math.floor(accuracyAvg)])\n  //   localStorage.setItem('accuracyDatas', JSON.stringify(accuracyDatas))\n\n  //   setSyncDatas((oldDatas) => [...oldDatas, Math.floor(syncAvg)])\n  //   localStorage.setItem('syncDatas', JSON.stringify(syncDatas))\n\n  //   setTime((oldDatas) => [...oldDatas, new Date().toLocaleTimeString()])\n  //   localStorage.setItem('time', JSON.stringify(time))\n  // }, [saveStatus])\n\n  useEffect(() => {\n    document.addEventListener('keydown', keyPress)\n    // setScore(0)\n    // setShowModal(false)\n    // setSaveStatus(false)\n    return () => document.removeEventListener('keydown', keyPress)\n  }, [keyPress])\n\n  // const handleSaveButton = () => {\n  //   console.log(flag)\n  //   if (flag) {\n  //     if (score === 1) {\n  //       increaseOneScore()\n  //     } else if (score === 2) {\n  //       increaseTwoScore()\n  //     } else if (score === 3) {\n  //       increaseThreeScore()\n  //     } else if (score === 4) {\n  //       increaseFourScore()\n  //     } else if (score === 5) {\n  //       increaseFiveScore()\n  //     } else if (score === 6) {\n  //       increaseSixScore()\n  //     } else if (score === 7) {\n  //       increaseSevenScore()\n  //     } else if (score === 8) {\n  //       increaseEightScore()\n  //     } else if (score === 9) {\n  //       increaseNineScore()\n  //     } else if (score === 10) {\n  //       increaseTenScore()\n  //     }\n  //   }\n  //   setAccuracyDatas((oldDatas) => [...oldDatas, Math.floor(accuracyAvg)])\n  //   localStorage.setItem('accuracyDatas', JSON.stringify(accuracyDatas))\n\n  //   setSyncDatas((oldDatas) => [...oldDatas, Math.floor(syncAvg)])\n  //   localStorage.setItem('syncDatas', JSON.stringify(syncDatas))\n\n  //   setTime((oldDatas) => [...oldDatas, new Date().toLocaleTimeString()])\n  //   localStorage.setItem('time', JSON.stringify(time))\n  //   setFlag(false)\n  //   console.log(flag)\n  // }\n\n  return (\n    <>\n      {showModal ? (\n        <Background onClick={closeModal} ref={modalRef}>\n          <animated.div style={animation}>\n            <ModalWrapper showModal={showModal}>\n              <ModalContentLeft style={{ justifyContent: 'center' }}>\n                <Grid container direction='column'>\n                  <Grid item xs={12}>\n                    <h1>Score</h1>\n                    <p>{score}/ 10</p>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <h1>Overall Sync</h1>\n                    <p>{syncAvg.toFixed(4)}%</p>\n                  </Grid>\n\n                  {/* <Grid item xs={12}>\n                    <h1>Overall Accuracy</h1>\n                    <p>{Math.floor(accuracyAvg)}%</p>\n                  </Grid> */}\n                </Grid>\n\n                {/* <button ref={btnRef} onClick={handleSaveButton}> */}\n                <button onClick={handleSaveButton}>Save</button>\n                <p>{saveStatus ? 'saved!' : ''}</p>\n              </ModalContentLeft>\n              <ModalContentRight>\n                {score > 7 ? (\n                  <h1>You are doing great! Keep it up!</h1>\n                ) : score > 5 ? (\n                  <h1>Practice more! You can be better</h1>\n                ) : (\n                  <h1>Do not give up! You can do it!</h1>\n                )}\n\n                <p>Tips: Watch video tutorial to improve further!</p>\n                <Link to='/dancebase'>\n                  <button>Watch Now</button>\n                </Link>\n              </ModalContentRight>\n              <CloseModalButton\n                aria-label='Close modal'\n                onClick={closeModalWithCross}\n              />\n            </ModalWrapper>\n          </animated.div>\n        </Background>\n      ) : null}\n\n      {/* <Snackbar\n        open={!saveStatus}\n        autoHideDuration={3000}\n        onClose={handleClose}\n      >\n        <Alert onClose={handleClose} severity='error' className={classes.alert}>\n          Saved!\n        </Alert>\n      </Snackbar> */}\n    </>\n  )\n}\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SpeechBubble/SpeechBubble.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialog.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialogHome.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Switch/OnOffSwitch.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChartScore.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SimpleCard/SimpleCard.js",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":69,"column":9,"nodeType":"173","messageId":"174","endLine":69,"endColumn":18},{"ruleId":"175","severity":1,"message":"176","line":134,"column":3,"nodeType":"173","endLine":134,"endColumn":12,"suggestions":"177"},{"ruleId":"171","severity":1,"message":"178","line":148,"column":10,"nodeType":"173","messageId":"174","endLine":148,"endColumn":21},{"ruleId":"175","severity":1,"message":"179","line":221,"column":6,"nodeType":"180","endLine":221,"endColumn":22,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":116,"column":1,"nodeType":"184","messageId":"185","endLine":137,"endColumn":2},{"ruleId":"171","severity":1,"message":"186","line":23,"column":8,"nodeType":"173","messageId":"174","endLine":23,"endColumn":18},{"ruleId":"171","severity":1,"message":"187","line":24,"column":8,"nodeType":"173","messageId":"174","endLine":24,"endColumn":18},{"ruleId":"171","severity":1,"message":"188","line":106,"column":10,"nodeType":"173","messageId":"174","endLine":106,"endColumn":20},{"ruleId":"171","severity":1,"message":"189","line":107,"column":10,"nodeType":"173","messageId":"174","endLine":107,"endColumn":20},{"ruleId":"171","severity":1,"message":"190","line":115,"column":10,"nodeType":"173","messageId":"174","endLine":115,"endColumn":20},{"ruleId":"171","severity":1,"message":"191","line":116,"column":10,"nodeType":"173","messageId":"174","endLine":116,"endColumn":21},{"ruleId":"171","severity":1,"message":"192","line":117,"column":10,"nodeType":"173","messageId":"174","endLine":117,"endColumn":21},{"ruleId":"171","severity":1,"message":"178","line":119,"column":10,"nodeType":"173","messageId":"174","endLine":119,"endColumn":21},{"ruleId":"171","severity":1,"message":"193","line":119,"column":23,"nodeType":"173","messageId":"174","endLine":119,"endColumn":37},{"ruleId":"175","severity":1,"message":"194","line":126,"column":3,"nodeType":"173","endLine":126,"endColumn":12,"suggestions":"195"},{"ruleId":"171","severity":1,"message":"196","line":147,"column":7,"nodeType":"173","messageId":"174","endLine":147,"endColumn":23},{"ruleId":"197","severity":1,"message":"198","line":18,"column":11,"nodeType":"199","endLine":21,"endColumn":13},{"ruleId":"167","replacedBy":"200"},{"ruleId":"169","replacedBy":"201"},{"ruleId":"175","severity":1,"message":"202","line":27,"column":6,"nodeType":"180","endLine":27,"endColumn":8,"suggestions":"203"},{"ruleId":"167","replacedBy":"204"},{"ruleId":"169","replacedBy":"205"},{"ruleId":"167","replacedBy":"206"},{"ruleId":"169","replacedBy":"207"},{"ruleId":"167","replacedBy":"208"},{"ruleId":"169","replacedBy":"209"},{"ruleId":"171","severity":1,"message":"210","line":38,"column":7,"nodeType":"173","messageId":"174","endLine":38,"endColumn":15},{"ruleId":"171","severity":1,"message":"211","line":202,"column":10,"nodeType":"173","messageId":"174","endLine":202,"endColumn":18},{"ruleId":"171","severity":1,"message":"212","line":203,"column":10,"nodeType":"173","messageId":"174","endLine":203,"endColumn":18},{"ruleId":"171","severity":1,"message":"213","line":204,"column":10,"nodeType":"173","messageId":"174","endLine":204,"endColumn":20},{"ruleId":"171","severity":1,"message":"214","line":207,"column":10,"nodeType":"173","messageId":"174","endLine":207,"endColumn":19},{"ruleId":"171","severity":1,"message":"215","line":208,"column":10,"nodeType":"173","messageId":"174","endLine":208,"endColumn":19},{"ruleId":"171","severity":1,"message":"216","line":209,"column":10,"nodeType":"173","messageId":"174","endLine":209,"endColumn":18},{"ruleId":"171","severity":1,"message":"217","line":210,"column":10,"nodeType":"173","messageId":"174","endLine":210,"endColumn":20},{"ruleId":"171","severity":1,"message":"218","line":213,"column":10,"nodeType":"173","messageId":"174","endLine":213,"endColumn":20},{"ruleId":"171","severity":1,"message":"219","line":216,"column":10,"nodeType":"173","messageId":"174","endLine":216,"endColumn":19},{"ruleId":"171","severity":1,"message":"220","line":217,"column":10,"nodeType":"173","messageId":"174","endLine":217,"endColumn":18},{"ruleId":"171","severity":1,"message":"221","line":227,"column":10,"nodeType":"173","messageId":"174","endLine":227,"endColumn":14},{"ruleId":"171","severity":1,"message":"222","line":227,"column":16,"nodeType":"173","messageId":"174","endLine":227,"endColumn":23},{"ruleId":"175","severity":1,"message":"223","line":317,"column":5,"nodeType":"180","endLine":317,"endColumn":30,"suggestions":"224"},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"no-unused-vars","'openModal' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setGroupName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["227"],"'correctness' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'score' and 'testLog.danceMove'. Either include them or remove the dependency array.","ArrayExpression",["228"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'SimpleCard' is defined but never used.","'BasicTable' is defined but never used.","'danceMove2' is assigned a value but never used.","'danceMove3' is assigned a value but never used.","'leaderName' is assigned a value but never used.","'member1Name' is assigned a value but never used.","'member2Name' is assigned a value but never used.","'setCorrectness' is assigned a value but never used.","React Hook useEffect contains a call to 'setLeaderName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["229"],"'currentDanceMove' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["225"],["226"],"React Hook useEffect has a missing dependency: 'lineChart'. Either include it or remove the dependency array.",["230"],["225"],["226"],["225"],["226"],["225"],["226"],"'ModalImg' is assigned a value but never used.","'oneScore' is assigned a value but never used.","'twoScore' is assigned a value but never used.","'threeScore' is assigned a value but never used.","'fourScore' is assigned a value but never used.","'fiveScore' is assigned a value but never used.","'sixScore' is assigned a value but never used.","'sevenScore' is assigned a value but never used.","'eightScore' is assigned a value but never used.","'nineScore' is assigned a value but never used.","'tenScore' is assigned a value but never used.","'flag' is assigned a value but never used.","'setFlag' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'setScore'. Either include it or remove the dependency array. If 'setScore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["231"],"no-global-assign","no-unsafe-negation",{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"232","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},"Add dependencies array: []",{"range":"241","text":"242"},"Update the dependencies array to be: [finalDanceMove, score, testLog.danceMove]",{"range":"243","text":"244"},{"range":"245","text":"242"},"Update the dependencies array to be: [lineChart]",{"range":"246","text":"247"},"Update the dependencies array to be: [setScore, setShowModal, showModal]",{"range":"248","text":"249"},[4221,4221],", []",[6805,6821],"[finalDanceMove, score, testLog.danceMove]",[3548,3548],[589,591],"[lineChart]",[8418,8443],"[setScore, setShowModal, showModal]"]