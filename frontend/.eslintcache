[{"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/index.js":"1","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/App.js":"2","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Playground.js":"3","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Dancebase.js":"4","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Progress.js":"5","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Developer.js":"6","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/Sidebar.js":"7","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/DancerCard/DancerCard.js":"8","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Button/StartButton.js":"9","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/VideoCarousel.js":"10","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/SidebarData.js":"11","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/LineChart/LineChart.js":"12","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CircularProgressWithLabel/CircularProgressWithLabel.js":"13","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/Item.js":"14","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChart.js":"15","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Authenticate.js":"16","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/InputAdornments/InputAdornments.js":"17","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CustomizedSnackbars/CustomizedSnackbars.js":"18","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Cartoon/Cartoon.js":"19","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Home.js":"20","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Modal/Modal.js":"21","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SpeechBubble/SpeechBubble.js":"22","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialog.js":"23","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialogHome.js":"24","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Switch/OnOffSwitch.js":"25","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChartScore.js":"26","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SimpleCard/SimpleCard.js":"27","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/DancerCard/DancerCard2.js":"28"},{"size":215,"mtime":1612534896684,"results":"29","hashOfConfig":"30"},{"size":1443,"mtime":1614660535375,"results":"31","hashOfConfig":"30"},{"size":21008,"mtime":1618290633892,"results":"32","hashOfConfig":"30"},{"size":709,"mtime":1614395133566,"results":"33","hashOfConfig":"30"},{"size":6263,"mtime":1618149727371,"results":"34","hashOfConfig":"30"},{"size":25927,"mtime":1618149637758,"results":"35","hashOfConfig":"30"},{"size":990,"mtime":1618150082281,"results":"36","hashOfConfig":"30"},{"size":1231,"mtime":1618149887902,"results":"37","hashOfConfig":"30"},{"size":573,"mtime":1612845180559,"results":"38","hashOfConfig":"30"},{"size":7490,"mtime":1614661999927,"results":"39","hashOfConfig":"30"},{"size":814,"mtime":1614661896346,"results":"40","hashOfConfig":"30"},{"size":959,"mtime":1616388411058,"results":"41","hashOfConfig":"30"},{"size":1362,"mtime":1613797732387,"results":"42","hashOfConfig":"30"},{"size":248,"mtime":1612668085315,"results":"43","hashOfConfig":"30"},{"size":2290,"mtime":1615951382844,"results":"44","hashOfConfig":"30"},{"size":1501,"mtime":1614662065893,"results":"45","hashOfConfig":"30"},{"size":4071,"mtime":1614661686233,"results":"46","hashOfConfig":"30"},{"size":1403,"mtime":1614144248682,"results":"47","hashOfConfig":"30"},{"size":2213,"mtime":1618149833663,"results":"48","hashOfConfig":"30"},{"size":1228,"mtime":1614688295089,"results":"49","hashOfConfig":"30"},{"size":9242,"mtime":1618150059771,"results":"50","hashOfConfig":"30"},{"size":322,"mtime":1614406035800,"results":"51","hashOfConfig":"30"},{"size":1174,"mtime":1614661317023,"results":"52","hashOfConfig":"30"},{"size":2444,"mtime":1617149058886,"results":"53","hashOfConfig":"30"},{"size":3641,"mtime":1614482873348,"results":"54","hashOfConfig":"30"},{"size":2313,"mtime":1618044557653,"results":"55","hashOfConfig":"30"},{"size":1118,"mtime":1614689838853,"results":"56","hashOfConfig":"30"},{"size":1466,"mtime":1618149905740,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1kb4at2",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"60"},"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/index.js",[],["126","127"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/App.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Playground.js",["128","129","130","131","132"],"import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { Grid, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Button from '@material-ui/core/Button'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport { motion } from 'framer-motion'\n\nimport io from 'socket.io-client'\nimport styled from 'styled-components'\n\nimport { Modal } from '../components/Modal/Modal'\nimport FormDialog from '../components/FormDialog/FormDialog'\nimport DancerCard from '../components/DancerCard/DancerCard'\nimport DancerCard2 from '../components/DancerCard/DancerCard2'\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n    paddingRight: 33,\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n  heading: {\n    fontSize: '4.5em',\n    letterSpacing: '-1px',\n    backgroundColor: '#503e9d',\n    top: '0px',\n    color: 'white',\n  },\n}))\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 50px;\n  bottom: 50px;\n`\n\nconst socket = io('http://localhost:3000', {\n  transports: ['websocket', 'polling'],\n})\n\nfunction Playground() {\n  const classes = useStyles()\n  const [danceMove, setDanceMove] = useState('Nothing')\n  const [danceMove2, setDanceMove2] = useState('Nothing')\n  const [danceMove3, setDanceMove3] = useState('Nothing')\n  const [finalDanceMove, setFinalDanceMove] = useState('nothing')\n  const [finalPosition, setFinalPosition] = useState('1 2 3')\n  const [accuracy, setAccuracy] = useState(0)\n  const [accuracy2, setAccuracy2] = useState(0)\n  const [accuracy3, setAccuracy3] = useState(0)\n  const [overallAccuracy, setOverallAccuracy] = useState(0)\n  const [posAccuracy, setPosAccuracy] = useState(0)\n  const [finalSync, setFinalSync] = useState('0')\n  const [syncAvg, setSyncAvg] = useState(0)\n  const [showModal, setShowModal] = useState(false)\n\n  const openModal = () => {\n    setShowModal((prev) => !prev)\n  }\n  const [connection, setConnection] = useState(false)\n\n  const handleConnection = () => {\n    if (connection) {\n      const syncSum = syncListFloat.reduce((a, b) => a + b, 0)\n      const syncAvg = syncSum / syncList.length || 0\n      setSyncAvg(syncAvg)\n    }\n    connection ? setConnection(false) : setConnection(true)\n    connection ? setShowModal(true) : setShowModal(false)\n  }\n\n  const [open, setOpen] = React.useState(false)\n  const handleClickOpen = () => {\n    setOpen(true)\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const [open2, setOpen2] = React.useState(false)\n  const handleClickOpen2 = () => {\n    setOpen2(true)\n  }\n  const handleClose2 = () => {\n    setOpen2(false)\n  }\n\n  const [open3, setOpen3] = React.useState(false)\n  const handleClickOpen3 = () => {\n    setOpen3(true)\n  }\n  const handleClose3 = () => {\n    setOpen3(false)\n  }\n\n  function handleLeaderNameChange(e) {\n    console.log(e.target.value)\n    localStorage.setItem('leaderName', e.target.value)\n  }\n\n  function handleMember1NameChange(e) {\n    console.log(e.target.value)\n    localStorage.setItem('member1Name', e.target.value)\n  }\n\n  function handleMember2NameChange(e) {\n    console.log(e.target.value)\n    localStorage.setItem('member2Name', e.target.value)\n  }\n\n  const [groupName, setGroupName] = useState('Group Name')\n  const [leaderName, setLeaderName] = useState('Leader Name')\n  const [member1Name, setMember1Name] = useState('Member 1 Name')\n  const [member2Name, setMember2Name] = useState('Member 2 Name')\n\n  useEffect(() => {\n    setGroupName(localStorage.getItem('groupName'))\n    setLeaderName(localStorage.getItem('leaderName'))\n    setMember1Name(localStorage.getItem('member1Name'))\n    setMember2Name(localStorage.getItem('member2Name'))\n  })\n\n  const [score, setScore] = useState(0)\n  const [maxScore, setMaxScore] = useState(0)\n  const [score2, setScore2] = useState(0)\n  const [maxScore2, setMaxScore2] = useState(0)\n  const [score3, setScore3] = useState(0)\n  const [maxScore3, setMaxScore3] = useState(0)\n  const [scorePos, setScorePos] = useState(0)\n  const [maxScorePos, setMaxScorePos] = useState(0)\n  const [correctness, setCorrectness] = useState(false)\n  const [syncList, setSyncList] = useState([])\n\n  useEffect(() => {\n    if (connection) {\n      setAccuracy(0)\n      setScore(0)\n      setScore2(0)\n      setScore3(0)\n      setScorePos(0)\n      setMaxScore(0)\n      setMaxScore2(0)\n      setMaxScore3(0)\n      setMaxScorePos(0)\n\n      socket.on('new_data', (newData) => {\n        setDanceMove(newData.danceMove)\n      })\n\n      socket.on('new_data2', (newData) => {\n        setDanceMove2(newData.danceMove)\n      })\n\n      socket.on('new_data3', (newData) => {\n        setDanceMove3(newData.danceMove)\n      })\n\n      socket.on('new_data4', (newData) => {\n        setFinalDanceMove(newData.finalDanceMove)\n        setFinalPosition(newData.finalPosition)\n        setFinalSync(newData.finalSync)\n        setSyncList((oldList) => [...oldList, newData.finalSync])\n      })\n    } else {\n      socket.off('new_data')\n      socket.off('new_data2')\n      socket.off('new_data3')\n      socket.off('new_data4')\n    }\n  }, [connection])\n\n  useEffect(() => {\n    const handleKey = (event) => {\n      if (event.keyCode === 81 && connection) {\n        setCorrectness(true)\n        setScore((prevScore) => prevScore + 1)\n        setMaxScore((prevScore) => prevScore + 1)\n      } else if (event.keyCode === 87 && connection) {\n        setCorrectness(true)\n        setScore2((prevScore) => prevScore + 1)\n        setMaxScore2((prevScore) => prevScore + 1)\n      } else if (event.keyCode === 69 && connection) {\n        setCorrectness(true)\n        setScore3((prevScore) => prevScore + 1)\n        setMaxScore3((prevScore) => prevScore + 1)\n      } else if (event.keyCode === 82 && connection) {\n        setCorrectness(true)\n        setScorePos((prevScore) => prevScore + 1)\n        setMaxScorePos((prevScore) => prevScore + 1)\n      } else if (event.keyCode === 65 && connection) {\n        setCorrectness(false)\n        setMaxScore((prevScore) => prevScore + 1)\n      } else if (event.keyCode === 83 && connection) {\n        setCorrectness(false)\n        setMaxScore2((prevScore) => prevScore + 1)\n      } else if (event.keyCode === 68 && connection) {\n        setCorrectness(false)\n        setMaxScore3((prevScore) => prevScore + 1)\n      } else if (event.keyCode === 70 && connection) {\n        setCorrectness(false)\n        setMaxScorePos((prevScore) => prevScore + 1)\n      }\n    }\n    window.addEventListener('keydown', handleKey)\n\n    return () => {\n      window.removeEventListener('keydown', handleKey)\n    }\n  })\n\n  useEffect(() => {\n    setAccuracy(maxScore === 0 ? 0 : (score * 100) / maxScore)\n    setAccuracy2(maxScore2 === 0 ? 0 : (score2 * 100) / maxScore2)\n    setAccuracy3(maxScore3 === 0 ? 0 : (score3 * 100) / maxScore3)\n    setOverallAccuracy((accuracy + accuracy2 + accuracy3) / 3)\n    setPosAccuracy(maxScorePos === 0 ? 0 : (scorePos * 100) / maxScorePos)\n  })\n\n  let syncListFloat = syncList.map(function (x) {\n    return parseFloat(x, 10)\n  })\n\n  console.log(syncAvg)\n  return (\n    <>\n      <FormDialog\n        handleClickOpen={handleClickOpen}\n        handleClose={handleClose}\n        open={open}\n        setOpen={setOpen}\n        handleNameChange={handleMember1NameChange}\n      />\n\n      <FormDialog\n        handleClickOpen={handleClickOpen2}\n        handleClose={handleClose2}\n        open={open2}\n        setOpen={setOpen2}\n        handleNameChange={handleLeaderNameChange}\n      />\n\n      <FormDialog\n        handleClickOpen={handleClickOpen3}\n        handleClose={handleClose3}\n        open={open3}\n        setOpen={setOpen3}\n        handleNameChange={handleMember2NameChange}\n      />\n      <Grid container justify='center' style={{ marginTop: '-10px' }}>\n        <Grid item xs={12}>\n          <Typography variant='h3' align='center' className={classes.heading}>\n            {groupName}\n          </Typography>\n        </Grid>\n      </Grid>\n\n      <Grid container justify='center'>\n        {/* Display Dancer Cards start here */}\n        {/* 1 2 3 */}\n        {finalPosition === '1 2 3' && (\n          <>\n            {/* #1 */}\n            <Grid item>\n              <motion.span>\n                <DancerCard\n                  name={leaderName}\n                  position={finalPosition.substring(0, 1)}\n                  userImage='NRfYKuSKs_o'\n                  danceMove={danceMove}\n                  role='Leader'\n                  handleClickOpen={handleClickOpen2}\n                  accuracy={accuracy.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #2 */}\n            <Grid item>\n              <motion.span>\n                <DancerCard2\n                  name={member1Name}\n                  position={finalPosition.substring(2, 3)}\n                  userImage='OqQi3nCt4CA'\n                  danceMove={danceMove2}\n                  handleClickOpen={handleClickOpen}\n                  accuracy={accuracy2.toFixed(1)}\n                  sync={finalSync}\n                  posAccuracy={posAccuracy.toFixed(1)}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #3 */}\n            <Grid item>\n              <motion.span>\n                <DancerCard\n                  name={member2Name}\n                  position={finalPosition.substring(4)}\n                  userImage='SFJz9q9EAZc'\n                  danceMove={danceMove3}\n                  role='Member 2'\n                  handleClickOpen={handleClickOpen3}\n                  accuracy={accuracy3.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n          </>\n        )}\n        {/* 1 3 2 */}\n        {finalPosition === '1 3 2' && (\n          <>\n            {/* #1 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard\n                  name={leaderName}\n                  position={finalPosition.substring(0, 1)}\n                  userImage='NRfYKuSKs_o'\n                  danceMove={danceMove}\n                  role='Leader'\n                  handleClickOpen={handleClickOpen2}\n                  accuracy={accuracy.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #3 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard\n                  name={member2Name}\n                  position={finalPosition.substring(4)}\n                  userImage='SFJz9q9EAZc'\n                  danceMove={danceMove3}\n                  role='Member 2'\n                  handleClickOpen={handleClickOpen3}\n                  accuracy={accuracy3.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #2 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard2\n                  name={member1Name}\n                  position={finalPosition.substring(2, 3)}\n                  userImage='OqQi3nCt4CA'\n                  danceMove={danceMove2}\n                  handleClickOpen={handleClickOpen}\n                  accuracy={accuracy2.toFixed(1)}\n                  sync={finalSync}\n                  posAccuracy={posAccuracy.toFixed(1)}\n                />\n              </motion.span>\n            </Grid>\n          </>\n        )}\n\n        {/* 2 1 3 */}\n        {finalPosition === '2 1 3' && (\n          <>\n            {/* #2 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard2\n                  name={member1Name}\n                  position={finalPosition.substring(2, 3)}\n                  userImage='OqQi3nCt4CA'\n                  danceMove={danceMove2}\n                  handleClickOpen={handleClickOpen}\n                  accuracy={accuracy2.toFixed(1)}\n                  sync={finalSync}\n                  posAccuracy={posAccuracy.toFixed(1)}\n                />\n              </motion.span>\n            </Grid>\n            {/* #1 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard\n                  name={leaderName}\n                  position={finalPosition.substring(0, 1)}\n                  userImage='NRfYKuSKs_o'\n                  danceMove={danceMove}\n                  role='Leader'\n                  handleClickOpen={handleClickOpen2}\n                  accuracy={accuracy.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #3 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard\n                  name={member2Name}\n                  position={finalPosition.substring(4)}\n                  userImage='SFJz9q9EAZc'\n                  danceMove={danceMove3}\n                  role='Member 2'\n                  handleClickOpen={handleClickOpen3}\n                  accuracy={accuracy3.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n          </>\n        )}\n\n        {/* 2 3 1 */}\n        {finalPosition === '2 3 1' && (\n          <>\n            {/* #2 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard2\n                  name={member1Name}\n                  position={finalPosition.substring(2, 3)}\n                  userImage='OqQi3nCt4CA'\n                  danceMove={danceMove2}\n                  handleClickOpen={handleClickOpen}\n                  accuracy={accuracy2.toFixed(1)}\n                  sync={finalSync}\n                  posAccuracy={posAccuracy.toFixed(1)}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #3 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard\n                  name={member2Name}\n                  position={finalPosition.substring(4)}\n                  userImage='SFJz9q9EAZc'\n                  danceMove={danceMove3}\n                  role='Member 2'\n                  handleClickOpen={handleClickOpen3}\n                  accuracy={accuracy3.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #1 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard\n                  name={leaderName}\n                  position={finalPosition.substring(0, 1)}\n                  userImage='NRfYKuSKs_o'\n                  danceMove={danceMove}\n                  role='Leader'\n                  handleClickOpen={handleClickOpen2}\n                  accuracy={accuracy.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n          </>\n        )}\n\n        {/* 3 1 2 */}\n        {finalPosition === '3 1 2' && (\n          <>\n            {/* #3 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard\n                  name={member2Name}\n                  position={finalPosition.substring(4)}\n                  userImage='SFJz9q9EAZc'\n                  danceMove={danceMove3}\n                  role='Member 2'\n                  handleClickOpen={handleClickOpen3}\n                  accuracy={accuracy3.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #1 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard\n                  name={leaderName}\n                  position={finalPosition.substring(0, 1)}\n                  userImage='NRfYKuSKs_o'\n                  danceMove={danceMove}\n                  role='Leader'\n                  handleClickOpen={handleClickOpen2}\n                  accuracy={accuracy.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #2 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard2\n                  name={member1Name}\n                  position={finalPosition.substring(2, 3)}\n                  userImage='OqQi3nCt4CA'\n                  danceMove={danceMove2}\n                  handleClickOpen={handleClickOpen}\n                  accuracy={accuracy2.toFixed(1)}\n                  sync={finalSync}\n                  posAccuracy={posAccuracy.toFixed(1)}\n                />\n              </motion.span>\n            </Grid>\n          </>\n        )}\n\n        {/* 3 2 1 */}\n        {finalPosition === '3 2 1' && (\n          <>\n            {/* #3 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard\n                  name={member2Name}\n                  position={finalPosition.substring(4)}\n                  userImage='SFJz9q9EAZc'\n                  danceMove={danceMove3}\n                  role='Member 2'\n                  handleClickOpen={handleClickOpen3}\n                  accuracy={accuracy3.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #2 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard2\n                  name={member1Name}\n                  position={finalPosition.substring(2, 3)}\n                  userImage='OqQi3nCt4CA'\n                  danceMove={danceMove2}\n                  handleClickOpen={handleClickOpen}\n                  accuracy={accuracy2.toFixed(1)}\n                  sync={finalSync}\n                  posAccuracy={posAccuracy.toFixed(1)}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #1 */}\n            <Grid item>\n              <motion.span layout>\n                <DancerCard\n                  name={leaderName}\n                  position='1 2 3'\n                  userImage='NRfYKuSKs_o'\n                  danceMove={danceMove}\n                  role='Leader'\n                  handleClickOpen={handleClickOpen2}\n                  accuracy={accuracy.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n          </>\n        )}\n\n        {/* Completed */}\n        {finalPosition === '' && (\n          <>\n            {/* #1 */}\n            <Grid item>\n              <motion.span>\n                <DancerCard\n                  name={leaderName}\n                  position='1 2 3'\n                  userImage='NRfYKuSKs_o'\n                  danceMove='Completed'\n                  role='Leader'\n                  handleClickOpen={handleClickOpen2}\n                  accuracy={accuracy.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #2 */}\n            <Grid item>\n              <motion.span>\n                <DancerCard2\n                  name={member1Name}\n                  position='1 2 3'\n                  userImage='OqQi3nCt4CA'\n                  danceMove='Completed'\n                  handleClickOpen={handleClickOpen}\n                  accuracy={accuracy2.toFixed(1)}\n                  sync={finalSync}\n                  posAccuracy={posAccuracy.toFixed(1)}\n                />\n              </motion.span>\n            </Grid>\n\n            {/* #3 */}\n            <Grid item>\n              <motion.span>\n                <DancerCard\n                  name={member2Name}\n                  position='1 2 3'\n                  userImage='SFJz9q9EAZc'\n                  danceMove='Completed'\n                  role='Member 2'\n                  handleClickOpen={handleClickOpen3}\n                  accuracy={accuracy3.toFixed(1)}\n                  sync={finalSync}\n                />\n              </motion.span>\n            </Grid>\n          </>\n        )}\n      </Grid>\n\n      <Grid container justify='center'>\n        <Grid item>\n          <Button\n            variant='contained'\n            color='secondary'\n            onClick={handleConnection}\n            className={classes.margin}\n          >\n            {connection ? <p>END</p> : <p>START</p>}\n          </Button>\n\n          <Container>\n            <Modal\n              showModal={showModal}\n              setShowModal={setShowModal}\n              score={score}\n              setScore={setScore}\n              maxScore={maxScore}\n              setMaxScore={setMaxScore}\n              accuracy={overallAccuracy}\n              setSyncList={setSyncList}\n              syncList={syncList}\n              syncAvg={syncAvg}\n              posAccuracy={posAccuracy}\n            />\n          </Container>\n          <Backdrop\n            className={classes.backdrop}\n            open={connection ? !socket.connected : false}\n          >\n            <CircularProgress color='inherit' />\n          </Backdrop>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nexport default Playground\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Dancebase.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Progress.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Developer.js",["133","134","135","136","137","138","139","140","141"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\nimport { Grid } from '@material-ui/core'\n\nimport io from 'socket.io-client'\nimport { useEffect, useState } from 'react'\nimport {\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n} from 'recharts'\nimport Button from '@material-ui/core/Button'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport { FaPlay, FaPause } from 'react-icons/fa'\nimport { IconContext } from 'react-icons'\nimport MuiTooltip from '@material-ui/core/Tooltip'\nconst socket = io('http://localhost:3000', {\n  transports: ['websocket', 'polling'],\n})\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div\n      role='tabpanel'\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  )\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n  margin: {\n    margin: theme.spacing(1),\n    paddingRight: 20,\n  },\n  logout: {\n    margin: theme.spacing(1),\n    paddingRight: 33,\n    width: '100px',\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n  heading: {\n    fontSize: '4.5em',\n    letterSpacing: '-1px',\n    backgroundColor: '#503e9d',\n    color: 'white',\n  },\n}))\n\nexport default function Developer(props) {\n  const classes = useStyles()\n  const [value, setValue] = React.useState(0)\n  const { access } = props\n\n  const [data, setData] = useState([])\n  const [data2, setData2] = useState([])\n  const [data3, setData3] = useState([])\n\n  const [danceMove, setDanceMove] = useState('Dab')\n  const [danceMove2, setDanceMove2] = useState('Dab')\n  const [danceMove3, setDanceMove3] = useState('Dab')\n\n  const [connection, setConnection] = useState(false)\n\n  const [leaderName, setLeaderName] = useState('Leader Name')\n  const [member1Name, setMember1Name] = useState('Member 1 Name')\n  const [member2Name, setMember2Name] = useState('Member 2 Name')\n\n  const [correctness, setCorrectness] = useState(false)\n  const handleConnection = () => {\n    connection ? setConnection(false) : setConnection(true)\n\n    console.log('clicked')\n  }\n\n  useEffect(() => {\n    setLeaderName(localStorage.getItem('leaderName'))\n    setMember1Name(localStorage.getItem('member1Name'))\n    setMember2Name(localStorage.getItem('member2Name'))\n  })\n\n  const handleAccess = () => {\n    access(false)\n  }\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue)\n  }\n\n  useEffect(() => {\n    if (connection) {\n      socket.on('new_data', (newData) => {\n        console.log(newData.EMG)\n        setData((currentData) => {\n          if (currentData.length === 20) {\n            currentData = currentData.slice(1)\n          }\n          return currentData.concat(newData)\n        })\n        setDanceMove(newData.danceMove)\n      })\n\n      socket.on('new_data2', (newData2) => {\n        console.log(newData2.EMG)\n\n        setData2((currentData) => {\n          if (currentData.length === 20) {\n            currentData = currentData.slice(1)\n          }\n          return currentData.concat(newData2)\n        })\n\n        setDanceMove2(newData2.danceMove)\n      })\n\n      socket.on('new_data3', (newData3) => {\n        console.log(newData3.EMG)\n\n        setData3((currentData) => {\n          if (currentData.length === 20) {\n            currentData = currentData.slice(1)\n          }\n          return currentData.concat(newData3)\n        })\n\n        setDanceMove3(newData3.danceMove)\n      })\n    } else {\n      socket.off('new_data')\n      socket.off('new_data2')\n      socket.off('new_data3')\n    }\n  }, [connection])\n\n  return (\n    <>\n      <Grid container justify='center' style={{ marginTop: '-10px' }}>\n        <Grid item xs={12}>\n          <Typography variant='h3' align='center' className={classes.heading}>\n            {' '}\n            Developer Mode\n          </Typography>\n        </Grid>\n      </Grid>\n      <div className={classes.root}>\n        <AppBar position='static' color='default'>\n          <Tabs\n            value={value}\n            onChange={handleChange}\n            indicatorColor='primary'\n            textColor='primary'\n            variant='scrollable'\n            scrollButtons='auto'\n            aria-label='scrollable auto tabs example'\n          >\n            <Tab label='Member 1' {...a11yProps(0)} />\n            <Tab label='Leader' {...a11yProps(1)} />\n            <Tab label='Member 2' {...a11yProps(2)} />\n            <Tab label='EMG' {...a11yProps(3)} />\n\n            <Grid container justify='flex-end'>\n              <MuiTooltip title='Connect/Disconnect'>\n                <IconButton\n                  aria-label='connect'\n                  className={classes.margin}\n                  size='large'\n                  onClick={handleConnection}\n                >\n                  {connection ? (\n                    <IconContext.Provider\n                      value={{ color: 'red', className: 'global-class-name' }}\n                    >\n                      <FaPause size={30} />\n                    </IconContext.Provider>\n                  ) : (\n                    <IconContext.Provider\n                      value={{ color: 'green', className: 'global-class-name' }}\n                    >\n                      <FaPlay size={30} />\n                    </IconContext.Provider>\n                  )}\n                </IconButton>\n              </MuiTooltip>\n\n              <Backdrop\n                className={classes.backdrop}\n                open={connection ? !socket.connected : false}\n              >\n                <CircularProgress color='inherit' />\n              </Backdrop>\n\n              <Button\n                variant='contained'\n                color='secondary'\n                onClick={handleAccess}\n                className={classes.logout}\n              >\n                Log out\n              </Button>\n            </Grid>\n          </Tabs>\n        </AppBar>\n        <TabPanel value={value} index={0}>\n          <>\n            <Grid container justify='space-between'>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'blue' }}>(Left) MPU </h1>\n\n                  <LineChart width={500} height={300} data={data2}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberOneLeftA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberOneLeftA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberOneLeftA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n\n                  <LineChart width={500} height={300} data={data2}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberOneLeftG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberOneLeftG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberOneLeftG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'red' }}>(Right) MPU </h1>\n\n                  <LineChart width={500} height={300} data={data2}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberOneRightA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberOneRightA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberOneRightA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data2}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberOneRightG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberOneRightG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberOneRightG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n            </Grid>\n          </>\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <>\n            <Grid container justify='space-between'>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'blue' }}>(Left) MPU </h1>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisLeaderLeftA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisLeaderLeftA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisLeaderLeftA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisLeaderLeftG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisLeaderLeftG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisLeaderLeftG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'red' }}>(Right) MPU </h1>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisLeaderRightA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisLeaderRightA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisLeaderRightA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisLeaderRightG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisLeaderRightG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisLeaderRightG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n            </Grid>\n          </>\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          <>\n            <Grid container justify='space-between'>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'blue' }}>(Left) MPU </h1>\n                  <LineChart width={500} height={300} data={data3}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberTwoLeftA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberTwoLeftA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberTwoLeftA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data3}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberTwoLeftG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberTwoLeftG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberTwoLeftG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n              <Grid item>\n                <div>\n                  <h1 style={{ color: 'red' }}>(Right) MPU </h1>\n                  <LineChart width={500} height={300} data={data3}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberTwoRightA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberTwoRightA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberTwoRightA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data3}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                      width={120}\n                      type='number'\n                      domain={[-5000, 5000]}\n                    />\n                    <Line\n                      name='x'\n                      type='linear'\n                      dataKey='xAxisMemberTwoRightG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='linear'\n                      dataKey='yAxisMemberTwoRightG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='linear'\n                      dataKey='zAxisMemberTwoRightG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n            </Grid>\n          </>\n        </TabPanel>\n        <TabPanel value={value} index={3}>\n          <LineChart\n            width={500}\n            height={300}\n            data={data}\n            style={{ marginLeft: '350px', marginTop: '120px' }}\n          >\n            <CartesianGrid strokeDasharray='3 3' />\n            <Tooltip />\n            {/* <Legend /> */}\n            <XAxis dataKey='time' />\n            <YAxis\n              label={{\n                value: 'EMG',\n                angle: -90,\n                position: 'middleLeft',\n              }}\n              domain={[-1000, 1000]}\n            />\n\n            <Line\n              name='EMG data'\n              type='linear'\n              dataKey='EMG'\n              stroke='#00b339'\n              isAnimationActive={false}\n            />\n          </LineChart>\n        </TabPanel>\n        <TabPanel value={value} index={4}>\n          Item Five\n        </TabPanel>\n        <TabPanel value={value} index={5}>\n          Item Six\n        </TabPanel>\n        <TabPanel value={value} index={6}>\n          Item Seven\n        </TabPanel>\n      </div>\n    </>\n  )\n}\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/Sidebar.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/DancerCard/DancerCard.js",["142"],"import React from 'react'\nimport './DancerCard.css'\nimport { Grid } from '@material-ui/core'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nfunction DancerCard(props) {\n  return (\n    <>\n      <div className='card'>\n        <Grid\n          style={{\n            width: '180px',\n            height: '100px',\n            position: 'relative',\n            left: '65px',\n          }}\n          className='card-image'\n          style={{\n            background: `url(https://source.unsplash.com/${props.userImage}/299x211)`,\n            backgroundSize: 'cover',\n          }}\n        ></Grid>\n\n        <div className='card-text'>\n          <Tooltip title='Edit Name'>\n            <h2 className='card-name' onClick={props.handleClickOpen}>\n              {props.name}\n            </h2>\n          </Tooltip>\n\n          <div className='card-dance-name'>{props.danceMove}</div>\n        </div>\n        <div className='card-stats'>\n          <div className='stat border'></div>\n          <div className='stat'>\n            <div className='value'>{props.accuracy}%</div>\n            <div className='type'>Accuracy</div>\n          </div>\n          <div className='stat'></div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default DancerCard\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Button/StartButton.js",[],["143","144"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/VideoCarousel.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/SidebarData.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/LineChart/LineChart.js",["145"],"import React, { useState, useEffect } from 'react'\nimport { Line } from 'react-chartjs-2'\n\nconst LineChart = ({ data, text, label, borderColor, time }) => {\n  const [lineData, setLineData] = useState({})\n  console.log(data)\n\n  const lineChart = () => {\n    setLineData({\n      labels: time,\n      datasets: [\n        {\n          label: label,\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: '#96a3ff',\n          borderColor: borderColor,\n          borderWidth: 2,\n          data: data,\n        },\n      ],\n    })\n  }\n\n  useEffect(() => {\n    lineChart()\n  }, [])\n\n  return (\n    <div style={{ width: '100%' }}>\n      <Line\n        data={lineData}\n        options={{\n          title: {\n            display: true,\n            text: text,\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: 'right',\n          },\n        }}\n      />\n    </div>\n  )\n}\n\nexport default LineChart\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CircularProgressWithLabel/CircularProgressWithLabel.js",[],["146","147"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/Item.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChart.js",[],["148","149"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Authenticate.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/InputAdornments/InputAdornments.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CustomizedSnackbars/CustomizedSnackbars.js",[],["150","151"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Cartoon/Cartoon.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Home.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Modal/Modal.js",["152","153","154","155","156","157","158","159","160","161","162","163","164","165"],"import React, { useRef, useEffect, useCallback } from 'react'\nimport { useSpring, animated } from 'react-spring'\nimport styled from 'styled-components'\nimport { MdClose } from 'react-icons/md'\nimport { Link } from 'react-router-dom'\nimport { useState } from 'react'\nimport Grid from '@material-ui/core/Grid'\n\nconst Background = styled.div`\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst ModalWrapper = styled.div`\n  width: 800px;\n  height: 500px;\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n  background: #fff;\n  color: #000;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  position: relative;\n  z-index: 10;\n  border-radius: 10px;\n`\n\nconst ModalImg = styled.img`\n  width: 100%;\n  height: 100%;\n  border-radius: 10px 0 0 10px;\n  background: #000;\n`\n\nconst ModalContentLeft = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flexstart;\n  align-items: center;\n  line-height: 1.8;\n  color: #141414;\n  p {\n    margin-bottom: 1rem;\n  }\n  button {\n    padding: 10px 24px;\n    background: #141414;\n    color: #fff;\n    border: none;\n  }\n`\nconst ModalContentRight = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  line-height: 1.8;\n  color: #141414;\n  p {\n    margin-bottom: 1rem;\n  }\n  button {\n    padding: 10px 24px;\n    background: #141414;\n    color: #fff;\n    border: none;\n  }\n`\n\nconst CloseModalButton = styled(MdClose)`\n  cursor: pointer;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 32px;\n  height: 32px;\n  padding: 0;\n  z-index: 10;\n`\n\nexport const Modal = ({\n  showModal,\n  setShowModal,\n  score,\n  setScore,\n  maxScore,\n  setMaxScore,\n  accuracy,\n  syncAvg,\n  posAccuracy,\n}) => {\n  const modalRef = useRef()\n\n  const animation = useSpring({\n    config: {\n      duration: 250,\n    },\n    opacity: showModal ? 1 : 0,\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`,\n  })\n\n  const closeModal = (e) => {\n    if (modalRef.current === e.target) {\n      setScore(0)\n      setMaxScore(0)\n      setShowModal(false)\n      setSaveStatus(false)\n    }\n  }\n\n  const closeModalWithCross = () => {\n    setScore(0)\n    setMaxScore(0)\n    setShowModal(false)\n    setSaveStatus(false)\n  }\n  const [saveStatus, setSaveStatus] = React.useState(false)\n\n  const [oneScore, setOneScore] = useState(localStorage.getItem('oneScore'))\n  const [twoScore, setTwoScore] = useState(localStorage.getItem('twoScore'))\n  const [threeScore, setThreeScore] = useState(\n    localStorage.getItem('threeScore')\n  )\n  const [fourScore, setFourScore] = useState(localStorage.getItem('fourScore'))\n  const [fiveScore, setFiveScore] = useState(localStorage.getItem('fiveScore'))\n  const [sixScore, setSixScore] = useState(localStorage.getItem('sixScore'))\n  const [sevenScore, setSevenScore] = useState(\n    localStorage.getItem('sevenScore')\n  )\n  const [eightScore, setEightScore] = useState(\n    localStorage.getItem('eightScore')\n  )\n  const [nineScore, setNineScore] = useState(localStorage.getItem('nineScore'))\n  const [tenScore, setTenScore] = useState(localStorage.getItem('tenScore'))\n\n  const [accuracyDatas, setAccuracyDatas] = useState(\n    JSON.parse(localStorage.getItem('accuracyDatas'))\n  )\n\n  const [syncDatas, setSyncDatas] = useState(\n    JSON.parse(localStorage.getItem('syncDatas'))\n  )\n\n  const [time, setTime] = useState(JSON.parse(localStorage.getItem('time')))\n  const [flag, setFlag] = useState(true)\n\n  const increaseOneScore = () => {\n    setOneScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('oneScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseTwoScore = () => {\n    setTwoScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('twoScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseThreeScore = () => {\n    setThreeScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('threeScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseFourScore = () => {\n    setFourScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('fourScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseFiveScore = () => {\n    setFiveScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('fiveScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseSixScore = () => {\n    setSixScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('sixScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseSevenScore = () => {\n    setSevenScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('sevenScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseEightScore = () => {\n    setEightScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('eightScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseNineScore = () => {\n    setNineScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('nineScore', newScore)\n      return newScore\n    })\n  }\n\n  const increaseTenScore = () => {\n    setTenScore((prevScore) => {\n      const newScore = Number(prevScore) + 1\n      localStorage.setItem('tenScore', newScore)\n      return newScore\n    })\n  }\n\n  const keyPress = useCallback(\n    (e) => {\n      if (e.key === 'Escape' && showModal) {\n        setShowModal(false)\n        setScore(0)\n        console.log('I pressed')\n      }\n    },\n    [setShowModal, showModal]\n  )\n\n  const handleSaveButton = (e) => {\n    setSaveStatus(true)\n\n    if (Math.floor(accuracy.toFixed(0) / 10) === 1) {\n      increaseOneScore()\n    } else if (Math.floor(accuracy.toFixed(0) / 10) === 2) {\n      increaseTwoScore()\n    } else if (Math.floor(accuracy.toFixed(0) / 10) === 3) {\n      increaseThreeScore()\n    } else if (Math.floor(accuracy.toFixed(0) / 10) === 4) {\n      increaseFourScore()\n    } else if (Math.floor(accuracy.toFixed(0) / 10) === 5) {\n      increaseFiveScore()\n    } else if (Math.floor(accuracy.toFixed(0) / 10) === 6) {\n      increaseSixScore()\n    } else if (Math.floor(accuracy.toFixed(0) / 10) === 7) {\n      increaseSevenScore()\n    } else if (Math.floor(accuracy.toFixed(0) / 10) === 8) {\n      increaseEightScore()\n    } else if (Math.floor(accuracy.toFixed(0) / 10) === 9) {\n      increaseNineScore()\n    } else if (Math.floor(accuracy.toFixed(0) / 10) === 10) {\n      increaseTenScore()\n    }\n\n    setAccuracyDatas((oldDatas) => [...oldDatas, Math.floor(accuracy)])\n    localStorage.setItem('accuracyDatas', JSON.stringify(accuracyDatas))\n\n    setSyncDatas((oldDatas) => [...oldDatas, syncAvg.toFixed(4)])\n    localStorage.setItem('syncDatas', JSON.stringify(syncDatas))\n\n    setTime((oldDatas) => [...oldDatas, new Date().toLocaleTimeString()])\n    localStorage.setItem('time', JSON.stringify(time))\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', keyPress)\n    return () => document.removeEventListener('keydown', keyPress)\n  }, [keyPress])\n\n  return (\n    <>\n      {showModal ? (\n        <Background onClick={closeModal} ref={modalRef}>\n          <animated.div style={animation}>\n            <ModalWrapper showModal={showModal}>\n              <ModalContentLeft style={{ justifyContent: 'center' }}>\n                <Grid container direction='column'>\n                  <Grid item xs={12}>\n                    <h1>Position Accuracy</h1>\n                    <p>{Math.floor(posAccuracy.toFixed(1))}%</p>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <h1>Team Accuracy</h1>\n                    <p>{Math.floor(accuracy.toFixed(1))}%</p>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <h1>Overall Sync</h1>\n                    <p>{syncAvg.toFixed(4)}ms</p>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <h1>Team Score</h1>\n                    <p>{Math.floor(accuracy.toFixed(0) / 10)}</p>\n                  </Grid>\n                </Grid>\n\n                <button onClick={handleSaveButton}>Save</button>\n                <p>{saveStatus ? 'saved!' : ''}</p>\n              </ModalContentLeft>\n              <ModalContentRight>\n                <div>\n                  {accuracy > 80 ? (\n                    <h1>You are doing great! Keep it up!</h1>\n                  ) : accuracy > 50 ? (\n                    <h1>Practice more! You can be better</h1>\n                  ) : (\n                    <h1>Do not give up! You can do it!</h1>\n                  )}\n                  <p>Tips: Watch video tutorial to improve further!</p>\n                  <Link to='/dancebase'>\n                    <button>Watch Now</button>\n                  </Link>\n                </div>\n              </ModalContentRight>\n              <CloseModalButton\n                aria-label='Close modal'\n                onClick={closeModalWithCross}\n              />\n            </ModalWrapper>\n          </animated.div>\n        </Background>\n      ) : null}\n    </>\n  )\n}\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SpeechBubble/SpeechBubble.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialog.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialogHome.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Switch/OnOffSwitch.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChartScore.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SimpleCard/SimpleCard.js",[],["166","167"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/DancerCard/DancerCard2.js",["168"],"import React from 'react'\nimport './DancerCard.css'\nimport { Grid } from '@material-ui/core'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nfunction DancerCard(props) {\n  return (\n    <>\n      <div className='card'>\n        <Grid\n          style={{\n            width: '180px',\n            height: '100px',\n            position: 'relative',\n            left: '65px',\n          }}\n          className='card-image'\n          style={{\n            background: `url(https://source.unsplash.com/${props.userImage}/299x211)`,\n            backgroundSize: 'cover',\n          }}\n        ></Grid>\n\n        <div className='card-text'>\n          <Tooltip title='Edit Name'>\n            <h2 className='card-name' onClick={props.handleClickOpen}>\n              {props.name}\n            </h2>\n          </Tooltip>\n\n          <div className='card-dance-name'>{props.danceMove}</div>\n        </div>\n\n        <div className='card-stats'>\n          <div className='stat border'>\n            <div className='value'>{props.posAccuracy}%</div>\n            <div className='type'>Pos Acc</div>\n          </div>\n          <div className='stat'>\n            <div className='value'>{props.accuracy}%</div>\n            <div className='type'>Accuracy</div>\n          </div>\n\n          <div className='stat'>\n            <div className='value'>{props.sync}ms</div>\n            <div className='type'>Sync</div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default DancerCard\n",{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":53,"column":10,"nodeType":"175","messageId":"176","endLine":53,"endColumn":24},{"ruleId":"173","severity":1,"message":"177","line":64,"column":9,"nodeType":"175","messageId":"176","endLine":64,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":123,"column":3,"nodeType":"175","endLine":123,"endColumn":12,"suggestions":"180"},{"ruleId":"173","severity":1,"message":"181","line":138,"column":10,"nodeType":"175","messageId":"176","endLine":138,"endColumn":21},{"ruleId":"178","severity":1,"message":"182","line":218,"column":3,"nodeType":"175","endLine":218,"endColumn":12,"suggestions":"183"},{"ruleId":"173","severity":1,"message":"184","line":103,"column":10,"nodeType":"175","messageId":"176","endLine":103,"endColumn":19},{"ruleId":"173","severity":1,"message":"185","line":104,"column":10,"nodeType":"175","messageId":"176","endLine":104,"endColumn":20},{"ruleId":"173","severity":1,"message":"186","line":105,"column":10,"nodeType":"175","messageId":"176","endLine":105,"endColumn":20},{"ruleId":"173","severity":1,"message":"187","line":109,"column":10,"nodeType":"175","messageId":"176","endLine":109,"endColumn":20},{"ruleId":"173","severity":1,"message":"188","line":110,"column":10,"nodeType":"175","messageId":"176","endLine":110,"endColumn":21},{"ruleId":"173","severity":1,"message":"189","line":111,"column":10,"nodeType":"175","messageId":"176","endLine":111,"endColumn":21},{"ruleId":"173","severity":1,"message":"181","line":113,"column":10,"nodeType":"175","messageId":"176","endLine":113,"endColumn":21},{"ruleId":"173","severity":1,"message":"190","line":113,"column":23,"nodeType":"175","messageId":"176","endLine":113,"endColumn":37},{"ruleId":"178","severity":1,"message":"191","line":120,"column":3,"nodeType":"175","endLine":120,"endColumn":12,"suggestions":"192"},{"ruleId":"193","severity":1,"message":"194","line":18,"column":11,"nodeType":"195","endLine":21,"endColumn":13},{"ruleId":"169","replacedBy":"196"},{"ruleId":"171","replacedBy":"197"},{"ruleId":"178","severity":1,"message":"198","line":27,"column":6,"nodeType":"199","endLine":27,"endColumn":8,"suggestions":"200"},{"ruleId":"169","replacedBy":"201"},{"ruleId":"171","replacedBy":"202"},{"ruleId":"169","replacedBy":"203"},{"ruleId":"171","replacedBy":"204"},{"ruleId":"169","replacedBy":"205"},{"ruleId":"171","replacedBy":"206"},{"ruleId":"173","severity":1,"message":"207","line":32,"column":7,"nodeType":"175","messageId":"176","endLine":32,"endColumn":15},{"ruleId":"173","severity":1,"message":"208","line":123,"column":10,"nodeType":"175","messageId":"176","endLine":123,"endColumn":18},{"ruleId":"173","severity":1,"message":"209","line":124,"column":10,"nodeType":"175","messageId":"176","endLine":124,"endColumn":18},{"ruleId":"173","severity":1,"message":"210","line":125,"column":10,"nodeType":"175","messageId":"176","endLine":125,"endColumn":20},{"ruleId":"173","severity":1,"message":"211","line":128,"column":10,"nodeType":"175","messageId":"176","endLine":128,"endColumn":19},{"ruleId":"173","severity":1,"message":"212","line":129,"column":10,"nodeType":"175","messageId":"176","endLine":129,"endColumn":19},{"ruleId":"173","severity":1,"message":"213","line":130,"column":10,"nodeType":"175","messageId":"176","endLine":130,"endColumn":18},{"ruleId":"173","severity":1,"message":"214","line":131,"column":10,"nodeType":"175","messageId":"176","endLine":131,"endColumn":20},{"ruleId":"173","severity":1,"message":"215","line":134,"column":10,"nodeType":"175","messageId":"176","endLine":134,"endColumn":20},{"ruleId":"173","severity":1,"message":"216","line":137,"column":10,"nodeType":"175","messageId":"176","endLine":137,"endColumn":19},{"ruleId":"173","severity":1,"message":"217","line":138,"column":10,"nodeType":"175","messageId":"176","endLine":138,"endColumn":18},{"ruleId":"173","severity":1,"message":"218","line":149,"column":10,"nodeType":"175","messageId":"176","endLine":149,"endColumn":14},{"ruleId":"173","severity":1,"message":"219","line":149,"column":16,"nodeType":"175","messageId":"176","endLine":149,"endColumn":23},{"ruleId":"178","severity":1,"message":"220","line":239,"column":5,"nodeType":"199","endLine":239,"endColumn":30,"suggestions":"221"},{"ruleId":"169","replacedBy":"222"},{"ruleId":"171","replacedBy":"223"},{"ruleId":"193","severity":1,"message":"194","line":18,"column":11,"nodeType":"195","endLine":21,"endColumn":13},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"no-unused-vars","'finalDanceMove' is assigned a value but never used.","Identifier","unusedVar","'openModal' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setGroupName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["226"],"'correctness' is assigned a value but never used.","React Hook useEffect contains a call to 'setAccuracy'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [maxScore, score, maxScore2, score2, maxScore3, score3, accuracy, accuracy2, accuracy3, maxScorePos, scorePos] as a second argument to the useEffect Hook.",["227"],"'danceMove' is assigned a value but never used.","'danceMove2' is assigned a value but never used.","'danceMove3' is assigned a value but never used.","'leaderName' is assigned a value but never used.","'member1Name' is assigned a value but never used.","'member2Name' is assigned a value but never used.","'setCorrectness' is assigned a value but never used.","React Hook useEffect contains a call to 'setLeaderName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["228"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["224"],["225"],"React Hook useEffect has a missing dependency: 'lineChart'. Either include it or remove the dependency array.","ArrayExpression",["229"],["224"],["225"],["224"],["225"],["224"],["225"],"'ModalImg' is assigned a value but never used.","'oneScore' is assigned a value but never used.","'twoScore' is assigned a value but never used.","'threeScore' is assigned a value but never used.","'fourScore' is assigned a value but never used.","'fiveScore' is assigned a value but never used.","'sixScore' is assigned a value but never used.","'sevenScore' is assigned a value but never used.","'eightScore' is assigned a value but never used.","'nineScore' is assigned a value but never used.","'tenScore' is assigned a value but never used.","'flag' is assigned a value but never used.","'setFlag' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'setScore'. Either include it or remove the dependency array. If 'setScore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["230"],["224"],["225"],"no-global-assign","no-unsafe-negation",{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"231","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},"Add dependencies array: []",{"range":"240","text":"241"},"Add dependencies array: [maxScore, score, maxScore2, score2, maxScore3, score3, accuracy, accuracy2, accuracy3, maxScorePos, scorePos]",{"range":"242","text":"243"},{"range":"244","text":"241"},"Update the dependencies array to be: [lineChart]",{"range":"245","text":"246"},"Update the dependencies array to be: [setScore, setShowModal, showModal]",{"range":"247","text":"248"},[3838,3838],", []",[7073,7073],", [maxScore, score, maxScore2, score2, maxScore3, score3, accuracy, accuracy2, accuracy3, maxScorePos, scorePos]",[3250,3250],[589,591],"[lineChart]",[5704,5729],"[setScore, setShowModal, showModal]"]