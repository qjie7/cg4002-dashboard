[{"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/index.js":"1","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/App.js":"2","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Playground.js":"3","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Dancebase.js":"4","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Progress.js":"5","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Developer.js":"6","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/Sidebar.js":"7","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BasicTable/BasicTable.js":"8","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/DancerCard/DancerCard.js":"9","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/RadioButtonsGroup/RadioButtonsGroup.js":"10","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Button/StartButton.js":"11","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/VideoCarousel.js":"12","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/MediaCard/MediaCard.js":"13","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/OutlinedCard/OutlinedCard.js":"14","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SearchBar/SearchBar.js":"15","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/SidebarData.js":"16","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SimpleCard/SimpleCard.js":"17","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/PieChart/PieChart.js":"18","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/LineChart/LineChart.js":"19","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CircularProgressWithLabel/CircularProgressWithLabel.js":"20","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/Item.js":"21","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChart.js":"22","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Authenticate.js":"23","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/InputAdornments/InputAdornments.js":"24","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CustomizedSnackbars/CustomizedSnackbars.js":"25","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Cartoon/Cartoon.js":"26","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Home.js":"27","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Modal/Modal.js":"28","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SpeechBubble/SpeechBubble.js":"29","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialog.js":"30","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialogHome.js":"31","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Switch/OnOffSwitch.js":"32","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChartScore.js":"33","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Scoreboard/Scoreboard.js":"34","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CardBox/CardBox.js":"35"},{"size":215,"mtime":1612534896684,"results":"36","hashOfConfig":"37"},{"size":1443,"mtime":1614660535375,"results":"38","hashOfConfig":"37"},{"size":7835,"mtime":1614662754839,"results":"39","hashOfConfig":"37"},{"size":709,"mtime":1614395133566,"results":"40","hashOfConfig":"37"},{"size":3868,"mtime":1614677157820,"results":"41","hashOfConfig":"37"},{"size":26054,"mtime":1614662152811,"results":"42","hashOfConfig":"37"},{"size":1045,"mtime":1614661782405,"results":"43","hashOfConfig":"37"},{"size":2002,"mtime":1614661185020,"results":"44","hashOfConfig":"37"},{"size":1563,"mtime":1614661232591,"results":"45","hashOfConfig":"37"},{"size":1280,"mtime":1612800229086,"results":"46","hashOfConfig":"37"},{"size":573,"mtime":1612845180559,"results":"47","hashOfConfig":"37"},{"size":7490,"mtime":1614661999927,"results":"48","hashOfConfig":"37"},{"size":1644,"mtime":1613442650902,"results":"49","hashOfConfig":"37"},{"size":1088,"mtime":1612757202142,"results":"50","hashOfConfig":"37"},{"size":2717,"mtime":1613298989483,"results":"51","hashOfConfig":"37"},{"size":814,"mtime":1614661896346,"results":"52","hashOfConfig":"37"},{"size":1118,"mtime":1614661980646,"results":"53","hashOfConfig":"37"},{"size":951,"mtime":1612762404458,"results":"54","hashOfConfig":"37"},{"size":2875,"mtime":1614677153630,"results":"55","hashOfConfig":"37"},{"size":1362,"mtime":1613797732387,"results":"56","hashOfConfig":"37"},{"size":248,"mtime":1612668085315,"results":"57","hashOfConfig":"37"},{"size":2290,"mtime":1614661129544,"results":"58","hashOfConfig":"37"},{"size":1501,"mtime":1614662065893,"results":"59","hashOfConfig":"37"},{"size":4071,"mtime":1614661686233,"results":"60","hashOfConfig":"37"},{"size":1403,"mtime":1614144248682,"results":"61","hashOfConfig":"37"},{"size":2455,"mtime":1614416519880,"results":"62","hashOfConfig":"37"},{"size":1208,"mtime":1614660783916,"results":"63","hashOfConfig":"37"},{"size":9361,"mtime":1614677295262,"results":"64","hashOfConfig":"37"},{"size":322,"mtime":1614406035800,"results":"65","hashOfConfig":"37"},{"size":1174,"mtime":1614661317023,"results":"66","hashOfConfig":"37"},{"size":2444,"mtime":1614661505313,"results":"67","hashOfConfig":"37"},{"size":3641,"mtime":1614482873348,"results":"68","hashOfConfig":"37"},{"size":2324,"mtime":1614661150575,"results":"69","hashOfConfig":"37"},{"size":7768,"mtime":1614639125345,"results":"70","hashOfConfig":"37"},{"size":1066,"mtime":1614661211416,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1kb4at2",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"95"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"103"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"95"},"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/index.js",[],["153","154"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/App.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Playground.js",["155","156","157","158"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Dancebase.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Progress.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Developer.js",["159","160"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\nimport { Grid } from '@material-ui/core'\n\nimport io from 'socket.io-client'\nimport { useEffect, useState } from 'react'\nimport {\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n} from 'recharts'\nimport Button from '@material-ui/core/Button'\nimport SimpleCard from '../components/SimpleCard/SimpleCard'\nimport BasicTable from '../components/BasicTable/BasicTable'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport { FaPlay, FaPause } from 'react-icons/fa'\nimport { IconContext } from 'react-icons'\nimport MuiTooltip from '@material-ui/core/Tooltip'\nconst socket = io('http://localhost:3000', {\n  transports: ['websocket', 'polling'],\n})\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div\n      role='tabpanel'\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  )\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n  margin: {\n    margin: theme.spacing(1),\n    paddingRight: 20,\n  },\n  logout: {\n    margin: theme.spacing(1),\n    paddingRight: 33,\n    width: '100px',\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n  heading: {\n    fontSize: '4.5em',\n    letterSpacing: '-1px',\n    backgroundColor: '#503e9d',\n    color: 'white',\n  },\n}))\n\nexport default function Developer(props) {\n  const classes = useStyles()\n  const [value, setValue] = React.useState(0)\n  const { access } = props\n\n  const [data, setData] = useState([])\n\n  const [danceMove, setDanceMove] = useState('Dab')\n\n  const [position, setPosition] = useState([1, 2, 3])\n\n  const [connection, setConnection] = useState(false)\n\n  const handleConnection = () => {\n    connection ? setConnection(false) : setConnection(true)\n\n    console.log('clicked')\n  }\n\n  const [leaderName, setLeaderName] = useState('Leader Name')\n  const [member1Name, setMember1Name] = useState('Member 1 Name')\n  const [member2Name, setMember2Name] = useState('Member 2 Name')\n\n  useEffect(() => {\n    setLeaderName(localStorage.getItem('leaderName'))\n    setMember1Name(localStorage.getItem('member1Name'))\n    setMember2Name(localStorage.getItem('member2Name'))\n  })\n\n  const handleAccess = () => {\n    access(false)\n  }\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue)\n  }\n\n  const [testLog, setTestLog] = useState({\n    danceMove: 'Dab',\n    position1: 1,\n    position2: 2,\n    position3: 3,\n  })\n  const [correctness, setCorrectness] = useState(false)\n\n  let currentDanceMove = danceMove\n\n  useEffect(() => {\n    if (connection) {\n      socket.on('new_data', (newData) => {\n        console.log(newData)\n        setData((currentData) => [...currentData, newData])\n        setPosition(newData.position)\n        setDanceMove(newData.danceMove)\n      })\n\n      socket.on('test_log', (newData) => {\n        setTestLog(newData)\n      })\n    } else {\n      socket.off('new_data')\n      socket.off('test_log')\n    }\n  }, [connection])\n\n  useEffect(() => {\n    if (currentDanceMove === testLog.danceMove) {\n      setCorrectness(true)\n    } else {\n      setCorrectness(false)\n    }\n  })\n\n  return (\n    <>\n      <Grid container justify='center' style={{ marginTop: '-10px' }}>\n        <Grid item xs={12}>\n          <Typography variant='h3' align='center' className={classes.heading}>\n            {' '}\n            Developer Mode\n          </Typography>\n        </Grid>\n      </Grid>\n      <div className={classes.root}>\n        <AppBar position='static' color='default'>\n          <Tabs\n            value={value}\n            onChange={handleChange}\n            indicatorColor='primary'\n            textColor='primary'\n            variant='scrollable'\n            scrollButtons='auto'\n            aria-label='scrollable auto tabs example'\n          >\n            <Tab label='Member 1' {...a11yProps(0)} />\n            <Tab label='Leader' {...a11yProps(1)} />\n            <Tab label='Member 2' {...a11yProps(2)} />\n            <Tab label='EMG' {...a11yProps(3)} />\n            <Tab label='Offline Analytics' {...a11yProps(4)} />\n\n            <Grid container justify='flex-end'>\n              <MuiTooltip title='Connect/Disconnect'>\n                <IconButton\n                  aria-label='connect'\n                  className={classes.margin}\n                  size='large'\n                  onClick={handleConnection}\n                >\n                  {connection ? (\n                    <IconContext.Provider\n                      value={{ color: 'red', className: 'global-class-name' }}\n                    >\n                      <FaPause size={30} />\n                    </IconContext.Provider>\n                  ) : (\n                    <IconContext.Provider\n                      value={{ color: 'green', className: 'global-class-name' }}\n                    >\n                      <FaPlay size={30} />\n                    </IconContext.Provider>\n                  )}\n                </IconButton>\n              </MuiTooltip>\n\n              <Backdrop\n                className={classes.backdrop}\n                open={connection ? !socket.connected : false}\n              >\n                <CircularProgress color='inherit' />\n              </Backdrop>\n\n              <Button\n                variant='contained'\n                color='secondary'\n                onClick={handleAccess}\n                className={classes.logout}\n              >\n                Log out\n              </Button>\n            </Grid>\n          </Tabs>\n        </AppBar>\n        <TabPanel value={value} index={0}>\n          <>\n            <Grid container justify='space-between'>\n              <Grid item>\n                <div>\n                  <h1>(Left) MPU </h1>\n\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisMemberOneLeftA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisMemberOneLeftA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisMemberOneLeftA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisMemberOneLeftG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisMemberOneLeftG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisMemberOneLeftG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n              <Grid item>\n                <div>\n                  <h1>(Right) MPU </h1>\n\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisMemberOneRightA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisMemberOneRightA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisMemberOneRightA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisMemberOneRightG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisMemberOneRightG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisMemberOneRightG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n            </Grid>\n          </>\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <>\n            <Grid container justify='space-between'>\n              <Grid item>\n                <div>\n                  <h1>(Left) MPU </h1>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisLeaderLeftA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisLeaderLeftA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisLeaderLeftA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisLeaderLeftG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisLeaderLeftG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisLeaderLeftG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n              <Grid item>\n                <div>\n                  <h1>(Right) MPU </h1>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisLeaderRightA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisLeaderRightA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisLeaderRightA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisLeaderRightG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisLeaderRightG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisLeaderRightG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n            </Grid>\n          </>\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          <>\n            <Grid container justify='space-between'>\n              <Grid item>\n                <div>\n                  <h1>(Left) MPU </h1>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisMemberTwoLeftA'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisMemberTwoLeftA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisMemberTwoLeftA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisMemberTwoLeftG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisMemberTwoLeftG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisMemberTwoLeftG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n              <Grid item>\n                <div>\n                  <h1>(Right) MPU </h1>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Accelerometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisMemberTwoRightA'\n                      stroke='#820000'\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisMemberTwoRightA'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisMemberTwoRightA'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <Tooltip />\n                    <Legend />\n                    <XAxis dataKey='time' />\n                    <YAxis\n                      label={{\n                        value: 'Gyrometer',\n                        angle: -90,\n                        position: 'middleLeft',\n                      }}\n                    />\n                    <Line\n                      name='x'\n                      type='monotone'\n                      dataKey='xAxisMemberTwoRightG'\n                      stroke='#820000'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='y'\n                      type='monotone'\n                      dataKey='yAxisMemberTwoRightG'\n                      stroke='#118200'\n                      isAnimationActive={false}\n                    />\n                    <Line\n                      name='z'\n                      type='monotone'\n                      dataKey='zAxisMemberTwoRightG'\n                      stroke='#000982'\n                      isAnimationActive={false}\n                    />\n                  </LineChart>\n                </div>\n              </Grid>\n            </Grid>\n          </>\n        </TabPanel>\n        <TabPanel value={value} index={3}>\n          <LineChart\n            width={500}\n            height={300}\n            data={data}\n            style={{ marginLeft: '350px', marginTop: '120px' }}\n          >\n            <CartesianGrid strokeDasharray='3 3' />\n            <Tooltip />\n            <Legend />\n            <XAxis dataKey='time' />\n            <YAxis\n              label={{\n                value: 'EMG',\n                angle: -90,\n                position: 'middleLeft',\n              }}\n            />\n            <Line\n              name='x'\n              type='monotone'\n              dataKey='xAxisEMG'\n              stroke='#820000'\n              isAnimationActive={false}\n            />\n            <Line\n              name='y'\n              type='monotone'\n              dataKey='yAxisEMG'\n              stroke='#118200'\n              isAnimationActive={false}\n            />\n            <Line\n              name='z'\n              type='monotone'\n              dataKey='zAxisEMG'\n              stroke='#000982'\n              isAnimationActive={false}\n            />\n          </LineChart>\n        </TabPanel>\n        <TabPanel value={value} index={4}>\n          <Typography variant='h3'>Test Log Received</Typography>\n\n          <Grid item style={{ justifyItems: 'center' }}>\n            <BasicTable\n              danceMove={testLog.danceMove}\n              position1={testLog.position1}\n              position2={testLog.position2}\n              position3={testLog.position3}\n              correctness={correctness}\n              member1Name={member1Name}\n              leaderName={leaderName}\n              member2Name={member2Name}\n            />\n          </Grid>\n\n          <Grid container justify='center' style={{ marginTop: '100px' }}>\n            <Grid item style={{ marginBottom: '25px' }}>\n              <Typography variant='h3'>Simulated Data</Typography>\n            </Grid>\n\n            <Grid container item justify='center'>\n              <Grid item>\n                <SimpleCard player={member1Name} danceMove={danceMove} />\n              </Grid>\n              <Grid item>\n                <SimpleCard player={leaderName} danceMove={danceMove} />\n              </Grid>\n              <Grid item>\n                <SimpleCard player={member2Name} danceMove={danceMove} />\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid container style={{ marginTop: '10px' }}>\n            <Grid container item justify='center'>\n              <Grid item>\n                <SimpleCard player='' position={position[0]} />\n              </Grid>\n              <Grid item>\n                <SimpleCard player='' position={position[1]} />\n              </Grid>\n              <Grid item>\n                <SimpleCard player='' position={position[2]} />\n              </Grid>\n            </Grid>\n          </Grid>\n        </TabPanel>\n        <TabPanel value={value} index={5}>\n          Item Six\n        </TabPanel>\n        <TabPanel value={value} index={6}>\n          Item Seven\n        </TabPanel>\n      </div>\n    </>\n  )\n}\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/Sidebar.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BasicTable/BasicTable.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/DancerCard/DancerCard.js",["161"],"import React from 'react'\nimport './DancerCard.css'\nimport { Grid } from '@material-ui/core'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nfunction DancerCard(props) {\n  return (\n    <>\n      <div className='card'>\n        <Grid\n          style={{\n            width: '180px',\n            height: '100px',\n            position: 'relative',\n            left: '65px',\n          }}\n          className='card-image'\n          style={{\n            background: `url(https://source.unsplash.com/${props.userImage}/640x426)`,\n            backgroundSize: 'cover',\n          }}\n        >\n          {/* {' '}\n          <img className='card-image' src={props.userImage} alt='' /> */}\n        </Grid>\n\n        <div className='card-text'>\n          <Tooltip title='Edit Name'>\n            <h2 className='card-name' onClick={props.handleClickOpen}>\n              {props.name}\n            </h2>\n          </Tooltip>\n\n          <div className='card-dance-name'>{props.danceMove}</div>\n        </div>\n        <div className='card-stats'>\n          <div className='stat'>\n            <div className='value'>{props.accuracy}%</div>\n            <div className='type'>Accuracy</div>\n          </div>\n          <div className='stat border'>\n            <div className='value'>{props.position}</div>\n            <div className='type'>Position</div>\n          </div>\n          <div className='stat'>\n            <div className='value'>{props.sync}%</div>\n            <div className='type'>Sync</div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default DancerCard\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/RadioButtonsGroup/RadioButtonsGroup.js",[],["162","163"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Button/StartButton.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/VideoCarousel.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/MediaCard/MediaCard.js",["164","165"],"import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport { Box } from '@material-ui/core'\n\nimport ReactPlayer from 'react-player'\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    borderRadius: 25,\n    marginBottom: 100,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  media: {\n    height: 500,\n  },\n})\n\nexport default function MediaCard(props) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          component='iframe'\n          className={classes.media}\n          src='{props.videolink}'\n          title='Contemplative Reptile'\n        />\n\n        <CardContent>\n          <Typography gutterBottom variant='h5' component='h2'>\n            ElbowKick\n          </Typography>\n          <Typography variant='body2' color='textSecondary' component='p'>\n            This move involve coordination between your elbows and legs\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size='small' color='primary'>\n          Share\n        </Button>\n        <Button size='small' color='primary'>\n          Learn More\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n",["166","167"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/OutlinedCard/OutlinedCard.js",["168","169"],"import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles({\n  root: {\n    width: 300,\n    height: 150,\n    marginRight: 120,\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginTop: 25,\n  },\n})\n\nexport default function OutlinedCard(props) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root} variant='outlined'>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color='textSecondary'\n          gutterBottom\n          align='center'\n        >\n          {props.title}\n        </Typography>\n\n        <Typography\n          className={classes.pos}\n          color='Secondary'\n          variant='h5'\n          align='center'\n        >\n          {props.count}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SearchBar/SearchBar.js",["170","171","172","173","174","175","176"],"import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport InputBase from '@material-ui/core/InputBase'\nimport IconButton from '@material-ui/core/IconButton'\nimport { FaSearch } from 'react-icons/fa'\nimport SearchIcon from '@material-ui/icons/Search'\nimport TextField from '@material-ui/core/TextField'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport { useState } from 'react'\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: '10px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 1000,\n    marginBottom: 50,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n}))\n\n// export default function SearchBar() {\n//   const classes = useStyles()\n\n//   return (\n//     <Paper component='form' className={classes.root}>\n//       {/* <div style={{ width: 300 }}> */}\n//       <Autocomplete\n//         freeSolo\n//         id='free-solo-2-demo'\n//         disableClearable\n//         options={danceMoves.map((option) => option.name)}\n//         renderInput={(params) => (\n//           <TextField\n//             {...params}\n//             label='Search input'\n//             margin='normal'\n//             variant='outlined'\n//             InputProps={{ ...params.InputProps, type: 'search' }}\n//           />\n//         )}\n//       />\n//       {/* </div> */}\n//       <InputBase\n//         className={classes.input}\n//         placeholder='Search Moves...'\n//         inputProps={{ 'aria-label': 'Search Moves...' }}\n//       />\n//       <IconButton\n//         type='submit'\n//         className={classes.iconButton}\n//         aria-label='search'\n//       >\n//         <SearchIcon />\n//       </IconButton>\n//     </Paper>\n//   )\n// }\n\n// /* eslint-disable no-use-before-define */\n// import React from 'react'\n// import TextField from '@material-ui/core/TextField'\n// import Autocomplete from '@material-ui/lab/Autocomplete'\n\nexport default function SearchBar() {\n  return (\n    <div style={{ width: 300 }}>\n      <Autocomplete\n        freeSolo\n        id='free-solo-2-demo'\n        disableClearable\n        options={danceMoves.map((option) => option.name)}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label='Search input'\n            margin='normal'\n            variant='outlined'\n            InputProps={{ ...params.InputProps, type: 'search' }}\n          />\n        )}\n      />\n    </div>\n  )\n}\n\nconst danceMoves = [\n  { name: 'Dab' },\n  { name: 'Elbow Kick' },\n  { name: 'Gun' },\n  { name: 'Hair' },\n  { name: 'Listen' },\n  { name: 'Point High' },\n  { name: 'Side Pump' },\n  { name: 'Wipe Table' },\n]\n","/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Sidebar/SidebarData.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SimpleCard/SimpleCard.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/PieChart/PieChart.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/LineChart/LineChart.js",["177"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CircularProgressWithLabel/CircularProgressWithLabel.js",[],["178","179"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/VideoCarousel/Item.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChart.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Authenticate.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/InputAdornments/InputAdornments.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CustomizedSnackbars/CustomizedSnackbars.js",[],["180","181"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Cartoon/Cartoon.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/pages/Home.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Modal/Modal.js",["182","183","184","185","186","187","188","189","190","191","192","193","194","195"],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/SpeechBubble/SpeechBubble.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialog.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/FormDialog/FormDialogHome.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Switch/OnOffSwitch.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/BarChart/BarChartScore.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Scoreboard/Scoreboard.js",[],"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/CardBox/CardBox.js",["196","197"],"import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport CardActions from '@material-ui/core/CardActions'\nimport Button from '@material-ui/core/Button'\nimport { Divider, makeStyles } from '@material-ui/core'\nimport CardHeader from '@material-ui/core/CardHeader'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    borderRadius: 12,\n    minWidth: 256,\n    textAlign: 'center',\n  },\n  header: {\n    textAlign: 'center',\n    spacing: 10,\n  },\n  list: {\n    padding: '20px',\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  action: {\n    display: 'flex',\n    justifyContent: 'space-around',\n  },\n}))\n\nexport const CardBox = React.memo(function CardBox(props) {\n  const classes = useStyles()\n  return (\n    <Card className={classes.root}>\n      <CardHeader title={props.title} className={classes.header} />\n      <Divider variant='middle' />\n      <CardContent>\n        <Typography variant='h4' align='center'>\n          {props.content}\n        </Typography>\n        {/* <div className={classes.list}>\n          <Typography align='center'>Manage tasks</Typography>\n          <Typography align='center'>Sync notes</Typography>\n          <Typography align='center'>Set deadline</Typography>\n        </div> */}\n      </CardContent>\n      <Divider variant='middle' />\n      {/* <CardActions className={classes.action}>\n        <Button variant='contained' color='primary' className={classes.button}>\n          Buy\n        </Button>\n      </CardActions> */}\n    </Card>\n  )\n})\n",{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":58,"column":9,"nodeType":"204","messageId":"205","endLine":58,"endColumn":18},{"ruleId":"206","severity":1,"message":"207","line":121,"column":3,"nodeType":"204","endLine":121,"endColumn":12,"suggestions":"208"},{"ruleId":"202","severity":1,"message":"209","line":135,"column":10,"nodeType":"204","messageId":"205","endLine":135,"endColumn":21},{"ruleId":"206","severity":1,"message":"210","line":177,"column":6,"nodeType":"211","endLine":177,"endColumn":17,"suggestions":"212"},{"ruleId":"206","severity":1,"message":"213","line":119,"column":3,"nodeType":"204","endLine":119,"endColumn":12,"suggestions":"214"},{"ruleId":"206","severity":1,"message":"215","line":161,"column":3,"nodeType":"204","endLine":161,"endColumn":12,"suggestions":"216"},{"ruleId":"217","severity":1,"message":"218","line":18,"column":11,"nodeType":"219","endLine":21,"endColumn":13},{"ruleId":"198","replacedBy":"220"},{"ruleId":"200","replacedBy":"221"},{"ruleId":"202","severity":1,"message":"222","line":10,"column":10,"nodeType":"204","messageId":"205","endLine":10,"endColumn":13},{"ruleId":"202","severity":1,"message":"223","line":12,"column":8,"nodeType":"204","messageId":"205","endLine":12,"endColumn":19},{"ruleId":"198","replacedBy":"224"},{"ruleId":"200","replacedBy":"225"},{"ruleId":"202","severity":1,"message":"226","line":4,"column":8,"nodeType":"204","messageId":"205","endLine":4,"endColumn":19},{"ruleId":"202","severity":1,"message":"227","line":6,"column":8,"nodeType":"204","messageId":"205","endLine":6,"endColumn":14},{"ruleId":"202","severity":1,"message":"228","line":3,"column":8,"nodeType":"204","messageId":"205","endLine":3,"endColumn":13},{"ruleId":"202","severity":1,"message":"229","line":4,"column":8,"nodeType":"204","messageId":"205","endLine":4,"endColumn":17},{"ruleId":"202","severity":1,"message":"230","line":5,"column":8,"nodeType":"204","messageId":"205","endLine":5,"endColumn":18},{"ruleId":"202","severity":1,"message":"231","line":6,"column":10,"nodeType":"204","messageId":"205","endLine":6,"endColumn":18},{"ruleId":"202","severity":1,"message":"232","line":7,"column":8,"nodeType":"204","messageId":"205","endLine":7,"endColumn":18},{"ruleId":"202","severity":1,"message":"233","line":10,"column":10,"nodeType":"204","messageId":"205","endLine":10,"endColumn":18},{"ruleId":"202","severity":1,"message":"234","line":11,"column":7,"nodeType":"204","messageId":"205","endLine":11,"endColumn":16},{"ruleId":"206","severity":1,"message":"235","line":90,"column":6,"nodeType":"211","endLine":90,"endColumn":8,"suggestions":"236"},{"ruleId":"198","replacedBy":"237"},{"ruleId":"200","replacedBy":"238"},{"ruleId":"198","replacedBy":"239"},{"ruleId":"200","replacedBy":"240"},{"ruleId":"202","severity":1,"message":"241","line":32,"column":7,"nodeType":"204","messageId":"205","endLine":32,"endColumn":15},{"ruleId":"202","severity":1,"message":"242","line":181,"column":10,"nodeType":"204","messageId":"205","endLine":181,"endColumn":18},{"ruleId":"202","severity":1,"message":"243","line":182,"column":10,"nodeType":"204","messageId":"205","endLine":182,"endColumn":18},{"ruleId":"202","severity":1,"message":"244","line":183,"column":10,"nodeType":"204","messageId":"205","endLine":183,"endColumn":20},{"ruleId":"202","severity":1,"message":"245","line":186,"column":10,"nodeType":"204","messageId":"205","endLine":186,"endColumn":19},{"ruleId":"202","severity":1,"message":"246","line":187,"column":10,"nodeType":"204","messageId":"205","endLine":187,"endColumn":19},{"ruleId":"202","severity":1,"message":"247","line":188,"column":10,"nodeType":"204","messageId":"205","endLine":188,"endColumn":18},{"ruleId":"202","severity":1,"message":"248","line":189,"column":10,"nodeType":"204","messageId":"205","endLine":189,"endColumn":20},{"ruleId":"202","severity":1,"message":"249","line":192,"column":10,"nodeType":"204","messageId":"205","endLine":192,"endColumn":20},{"ruleId":"202","severity":1,"message":"250","line":195,"column":10,"nodeType":"204","messageId":"205","endLine":195,"endColumn":19},{"ruleId":"202","severity":1,"message":"251","line":196,"column":10,"nodeType":"204","messageId":"205","endLine":196,"endColumn":18},{"ruleId":"202","severity":1,"message":"252","line":278,"column":10,"nodeType":"204","messageId":"205","endLine":278,"endColumn":14},{"ruleId":"202","severity":1,"message":"253","line":278,"column":16,"nodeType":"204","messageId":"205","endLine":278,"endColumn":23},{"ruleId":"206","severity":1,"message":"254","line":296,"column":5,"nodeType":"211","endLine":296,"endColumn":30,"suggestions":"255"},{"ruleId":"202","severity":1,"message":"226","line":5,"column":8,"nodeType":"204","messageId":"205","endLine":5,"endColumn":19},{"ruleId":"202","severity":1,"message":"227","line":6,"column":8,"nodeType":"204","messageId":"205","endLine":6,"endColumn":14},"no-native-reassign",["256"],"no-negated-in-lhs",["257"],"no-unused-vars","'openModal' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setGroupName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["258"],"'correctness' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'score' and 'testLog.danceMove'. Either include them or remove the dependency array.","ArrayExpression",["259"],"React Hook useEffect contains a call to 'setLeaderName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["260"],"React Hook useEffect contains a call to 'setCorrectness'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [currentDanceMove, testLog.danceMove] as a second argument to the useEffect Hook.",["261"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["256"],["257"],"'Box' is defined but never used.","'ReactPlayer' is defined but never used.",["256"],["257"],"'CardActions' is defined but never used.","'Button' is defined but never used.","'Paper' is defined but never used.","'InputBase' is defined but never used.","'IconButton' is defined but never used.","'FaSearch' is defined but never used.","'SearchIcon' is defined but never used.","'useState' is defined but never used.","'useStyles' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'lineChart'. Either include it or remove the dependency array.",["262"],["256"],["257"],["256"],["257"],"'ModalImg' is assigned a value but never used.","'oneScore' is assigned a value but never used.","'twoScore' is assigned a value but never used.","'threeScore' is assigned a value but never used.","'fourScore' is assigned a value but never used.","'fiveScore' is assigned a value but never used.","'sixScore' is assigned a value but never used.","'sevenScore' is assigned a value but never used.","'eightScore' is assigned a value but never used.","'nineScore' is assigned a value but never used.","'tenScore' is assigned a value but never used.","'flag' is assigned a value but never used.","'setFlag' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'setScore'. Either include it or remove the dependency array. If 'setScore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["263"],"no-global-assign","no-unsafe-negation",{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"264","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},"Add dependencies array: []",{"range":"275","text":"276"},"Update the dependencies array to be: [danceMove, score, testLog.danceMove]",{"range":"277","text":"278"},{"range":"279","text":"276"},"Add dependencies array: [currentDanceMove, testLog.danceMove]",{"range":"280","text":"281"},"Update the dependencies array to be: [lineChart]",{"range":"282","text":"283"},"Update the dependencies array to be: [setScore, setShowModal, showModal]",{"range":"284","text":"285"},[3537,3537],", []",[4866,4877],"[danceMove, score, testLog.danceMove]",[3181,3181],[4115,4115],", [currentDanceMove, testLog.danceMove]",[2495,2497],"[lineChart]",[7572,7597],"[setScore, setShowModal, showModal]"]