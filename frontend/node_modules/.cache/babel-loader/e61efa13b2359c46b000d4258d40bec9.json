{"ast":null,"code":"// import React from 'react'\n// import { ReactDom } from 'react-router-dom'\n// import PropTypes from 'prop-types'\n// import './Scoreboard.css'\n// const AddPlayerForm = ({ addPlayer }) => {\n//   let playerInput = React.createRef()\n//   let handleSubmit = (e) => {\n//     e.preventDefault()\n//     addPlayer(playerInput.current.value)\n//     e.currentTarget.reset()\n//   }\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <input type='text' placeholder='Enter a player name' ref={playerInput} />\n//       <input type='submit' value='Add Player' />\n//     </form>\n//   )\n// }\n// AddPlayerForm.propTypes = {\n//   addPlayer: PropTypes.func,\n// }\n// export default class Scoreboard extends React.Component {\n//   state = {\n//     players: [\n//       {\n//         name: 'Johnny Rose',\n//         score: 0,\n//         id: 1,\n//       },\n//       {\n//         name: 'Moira Rose',\n//         score: 0,\n//         id: 2,\n//       },\n//       {\n//         name: 'David Rose',\n//         score: 0,\n//         id: 3,\n//       },\n//       {\n//         name: 'Alexis Rose',\n//         score: 0,\n//         id: 4,\n//       },\n//     ],\n//   }\n//   prevPlayerId = 4\n//   handleScoreChange = (index, delta) => {\n//     this.setState((prevState) => ({\n//       score: (prevState.players[index].score += delta),\n//     }))\n//   }\n//   highestScore = () => {\n//     // const hello = Math.max.apply(Math, this.state.players.map(o => o.score))\n//     //const hello = Math.max(...this.state.players.map(o => o.score), 0);\n//     const hello = this.state.players.reduce((current, prev) =>\n//       current.score > prev.score ? current : prev\n//     ).score\n//     if (hello) {\n//       return hello\n//     }\n//   }\n//   handleAddPlayer = (name) => {\n//     this.setState((prevState) => {\n//       return {\n//         players: [\n//           ...prevState.players,\n//           {\n//             name,\n//             score: 0,\n//             id: (this.prevPlayerId += 1),\n//           },\n//         ],\n//       }\n//     })\n//   }\n//   handleRemovePlayer = (id) => {\n//     this.setState((prevState) => {\n//       return {\n//         players: prevState.players.filter((p) => p.id !== id),\n//       }\n//     })\n//   }\n//   render() {\n//     const highScore = this.highestScore()\n//     return (\n//       <div className='scoreboard'>\n//         <Header players={this.state.players} />,\n//         {this.state.players.map((player, index) => (\n//           <Player\n//             name={player.name}\n//             score={player.score}\n//             index={index}\n//             key={player.id.toString()}\n//             removePlayer={this.handleRemovePlayer}\n//             id={player.id}\n//             changeScore={this.handleScoreChange}\n//             isHighScore={highScore === player.score} // is a player's 'score' prop equal to the high score?\n//           />\n//         ))}\n//         <AddPlayerForm addPlayer={this.handleAddPlayer} />\n//       </div>\n//     )\n//   }\n// }\n// const Counter = ({ index, changeScore, score }) => {\n//   return (\n//     <div className='counter'>\n//       <button\n//         className='counter-action decrement'\n//         onClick={() => changeScore(index, -1)}\n//       >\n//         {' '}\n//         -{' '}\n//       </button>\n//       <span className='counter-score'>{score}</span>\n//       <button\n//         className='counter-action increment'\n//         onClick={() => changeScore(index, +1)}\n//       >\n//         {' '}\n//         +{' '}\n//       </button>\n//     </div>\n//   )\n// }\n// Counter.propTypes = {\n//   index: PropTypes.number,\n//   score: PropTypes.number,\n//   changeScore: PropTypes.func,\n// }\n// const Header = ({ title, players }) => {\n//   return (\n//     <header>\n//       <Stats players={players} />\n//       <h1>{title}</h1>\n//       <Stopwatch />\n//     </header>\n//   )\n// }\n// Header.propTypes = {\n//   title: PropTypes.string,\n//   players: PropTypes.arrayOf(PropTypes.object),\n// }\n// Header.defaultProps = {\n//   title: 'Scoreboard',\n// }\n// const Icon = (props) => {\n//   return (\n//     <svg\n//       viewBox='0 0 44 35'\n//       className={props.isHighScore ? 'is-high-score' : null}\n//     >\n//       <path\n//         d='M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z'\n//         transform='translate(0 0.301727)'\n//       />\n//       <rect\n//         width='30.4986'\n//         height='3.07759'\n//         transform='translate(6.56987 31.5603)'\n//       />\n//     </svg>\n//   )\n// }\n// Icon.propTypes = {\n//   isHighScore: PropTypes.bool,\n// }\n// class Player extends React.PureComponent {\n//   static propTypes = {\n//     changeScore: PropTypes.func,\n//     removePlayer: PropTypes.func,\n//     name: PropTypes.string.isRequired,\n//     id: PropTypes.number.isRequired,\n//     score: PropTypes.number,\n//     index: PropTypes.number,\n//     isHighScore: PropTypes.bool,\n//   }\n//   render() {\n//     const { name, id, score, index, removePlayer, changeScore } = this.props\n//     return (\n//       <div className='player'>\n//         <span className='player-name'>\n//           <button className='remove-player' onClick={() => removePlayer(id)}>\n//             âœ–\n//           </button>\n//           <Icon isHighScore={this.props.isHighScore} />\n//           {name}\n//         </span>\n//         <Counter score={score} changeScore={changeScore} index={index} />\n//       </div>\n//     )\n//   }\n// }\n// const Stats = ({ players }) => {\n//   const totalPlayers = players.length\n//   const totalPoints = players.reduce((total, player) => {\n//     return total + player.score\n//   }, 0)\n//   return (\n//     <table className='stats'>\n//       <tbody>\n//         <tr>\n//           <td>Players:</td>\n//           <td>{totalPlayers}</td>\n//         </tr>\n//         <tr>\n//           <td>Total Points:</td>\n//           <td>{totalPoints}</td>\n//         </tr>\n//       </tbody>\n//     </table>\n//   )\n// }\n// Stats.propTypes = {\n//   players: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       score: PropTypes.number,\n//     })\n//   ),\n// }\n// class Stopwatch extends React.Component {\n//   static propTypes = {\n//     isRunning: PropTypes.bool,\n//     elapsedTime: PropTypes.number,\n//     previousTime: PropTypes.number,\n//   }\n//   constructor() {\n//     super()\n//     this.state = {\n//       isRunning: false,\n//       elapsedTime: 0,\n//       previousTime: 0,\n//     }\n//   }\n//   componentDidMount() {\n//     this.intervalID = setInterval(() => this.tick(), 100)\n//   }\n//   componentWillUnmount() {\n//     clearInterval(this.intervalID)\n//   }\n//   tick = () => {\n//     if (this.state.isRunning) {\n//       const now = Date.now()\n//       this.setState((prevState) => ({\n//         previousTime: now,\n//         elapsedTime: prevState.elapsedTime + (now - this.state.previousTime),\n//       }))\n//     }\n//   }\n//   handleStopWatch = () => {\n//     this.setState((prevState) => ({\n//       isRunning: !prevState.isRunning,\n//     }))\n//     if (!this.state.isRunning) {\n//       this.setState({\n//         previousTime: Date.now(),\n//       })\n//     }\n//   }\n//   handleReset = () => {\n//     this.setState({\n//       elapsedTime: 0,\n//     })\n//   }\n//   render() {\n//     const seconds = Math.floor(this.state.elapsedTime / 1000)\n//     return (\n//       <div className='stopwatch'>\n//         <h2>Stopwatch</h2>\n//         <span className='stopwatch-time'>{seconds}</span>\n//         <button onClick={this.handleStopWatch}>\n//           {' '}\n//           {this.state.isRunning ? 'Stop' : 'Start'}\n//         </button>\n//         <button onClick={this.handleReset}>Reset</button>\n//       </div>\n//     )\n//   }\n// }","map":{"version":3,"sources":["/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Scoreboard/Scoreboard.js"],"names":[],"mappingssourcesContent":["// import React from 'react'\n// import { ReactDom } from 'react-router-dom'\n// import PropTypes from 'prop-types'\n// import './Scoreboard.css'\n\n// const AddPlayerForm = ({ addPlayer }) => {\n//   let playerInput = React.createRef()\n\n//   let handleSubmit = (e) => {\n//     e.preventDefault()\n//     addPlayer(playerInput.current.value)\n//     e.currentTarget.reset()\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <input type='text' placeholder='Enter a player name' ref={playerInput} />\n//       <input type='submit' value='Add Player' />\n//     </form>\n//   )\n// }\n\n// AddPlayerForm.propTypes = {\n//   addPlayer: PropTypes.func,\n// }\n// export default class Scoreboard extends React.Component {\n//   state = {\n//     players: [\n//       {\n//         name: 'Johnny Rose',\n//         score: 0,\n//         id: 1,\n//       },\n//       {\n//         name: 'Moira Rose',\n//         score: 0,\n//         id: 2,\n//       },\n//       {\n//         name: 'David Rose',\n//         score: 0,\n//         id: 3,\n//       },\n//       {\n//         name: 'Alexis Rose',\n//         score: 0,\n//         id: 4,\n//       },\n//     ],\n//   }\n\n//   prevPlayerId = 4\n\n//   handleScoreChange = (index, delta) => {\n//     this.setState((prevState) => ({\n//       score: (prevState.players[index].score += delta),\n//     }))\n//   }\n\n//   highestScore = () => {\n//     // const hello = Math.max.apply(Math, this.state.players.map(o => o.score))\n//     //const hello = Math.max(...this.state.players.map(o => o.score), 0);\n//     const hello = this.state.players.reduce((current, prev) =>\n//       current.score > prev.score ? current : prev\n//     ).score\n//     if (hello) {\n//       return hello\n//     }\n//   }\n\n//   handleAddPlayer = (name) => {\n//     this.setState((prevState) => {\n//       return {\n//         players: [\n//           ...prevState.players,\n//           {\n//             name,\n//             score: 0,\n//             id: (this.prevPlayerId += 1),\n//           },\n//         ],\n//       }\n//     })\n//   }\n\n//   handleRemovePlayer = (id) => {\n//     this.setState((prevState) => {\n//       return {\n//         players: prevState.players.filter((p) => p.id !== id),\n//       }\n//     })\n//   }\n\n//   render() {\n//     const highScore = this.highestScore()\n\n//     return (\n//       <div className='scoreboard'>\n//         <Header players={this.state.players} />,\n//         {this.state.players.map((player, index) => (\n//           <Player\n//             name={player.name}\n//             score={player.score}\n//             index={index}\n//             key={player.id.toString()}\n//             removePlayer={this.handleRemovePlayer}\n//             id={player.id}\n//             changeScore={this.handleScoreChange}\n//             isHighScore={highScore === player.score} // is a player's 'score' prop equal to the high score?\n//           />\n//         ))}\n//         <AddPlayerForm addPlayer={this.handleAddPlayer} />\n//       </div>\n//     )\n//   }\n// }\n// const Counter = ({ index, changeScore, score }) => {\n//   return (\n//     <div className='counter'>\n//       <button\n//         className='counter-action decrement'\n//         onClick={() => changeScore(index, -1)}\n//       >\n//         {' '}\n//         -{' '}\n//       </button>\n//       <span className='counter-score'>{score}</span>\n//       <button\n//         className='counter-action increment'\n//         onClick={() => changeScore(index, +1)}\n//       >\n//         {' '}\n//         +{' '}\n//       </button>\n//     </div>\n//   )\n// }\n\n// Counter.propTypes = {\n//   index: PropTypes.number,\n//   score: PropTypes.number,\n//   changeScore: PropTypes.func,\n// }\n// const Header = ({ title, players }) => {\n//   return (\n//     <header>\n//       <Stats players={players} />\n//       <h1>{title}</h1>\n//       <Stopwatch />\n//     </header>\n//   )\n// }\n\n// Header.propTypes = {\n//   title: PropTypes.string,\n//   players: PropTypes.arrayOf(PropTypes.object),\n// }\n\n// Header.defaultProps = {\n//   title: 'Scoreboard',\n// }\n// const Icon = (props) => {\n//   return (\n//     <svg\n//       viewBox='0 0 44 35'\n//       className={props.isHighScore ? 'is-high-score' : null}\n//     >\n//       <path\n//         d='M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z'\n//         transform='translate(0 0.301727)'\n//       />\n//       <rect\n//         width='30.4986'\n//         height='3.07759'\n//         transform='translate(6.56987 31.5603)'\n//       />\n//     </svg>\n//   )\n// }\n\n// Icon.propTypes = {\n//   isHighScore: PropTypes.bool,\n// }\n// class Player extends React.PureComponent {\n//   static propTypes = {\n//     changeScore: PropTypes.func,\n//     removePlayer: PropTypes.func,\n//     name: PropTypes.string.isRequired,\n//     id: PropTypes.number.isRequired,\n//     score: PropTypes.number,\n//     index: PropTypes.number,\n//     isHighScore: PropTypes.bool,\n//   }\n\n//   render() {\n//     const { name, id, score, index, removePlayer, changeScore } = this.props\n//     return (\n//       <div className='player'>\n//         <span className='player-name'>\n//           <button className='remove-player' onClick={() => removePlayer(id)}>\n//             âœ–\n//           </button>\n\n//           <Icon isHighScore={this.props.isHighScore} />\n\n//           {name}\n//         </span>\n\n//         <Counter score={score} changeScore={changeScore} index={index} />\n//       </div>\n//     )\n//   }\n// }\n// const Stats = ({ players }) => {\n//   const totalPlayers = players.length\n//   const totalPoints = players.reduce((total, player) => {\n//     return total + player.score\n//   }, 0)\n\n//   return (\n//     <table className='stats'>\n//       <tbody>\n//         <tr>\n//           <td>Players:</td>\n//           <td>{totalPlayers}</td>\n//         </tr>\n//         <tr>\n//           <td>Total Points:</td>\n//           <td>{totalPoints}</td>\n//         </tr>\n//       </tbody>\n//     </table>\n//   )\n// }\n\n// Stats.propTypes = {\n//   players: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       score: PropTypes.number,\n//     })\n//   ),\n// }\n// class Stopwatch extends React.Component {\n//   static propTypes = {\n//     isRunning: PropTypes.bool,\n//     elapsedTime: PropTypes.number,\n//     previousTime: PropTypes.number,\n//   }\n\n//   constructor() {\n//     super()\n//     this.state = {\n//       isRunning: false,\n//       elapsedTime: 0,\n//       previousTime: 0,\n//     }\n//   }\n\n//   componentDidMount() {\n//     this.intervalID = setInterval(() => this.tick(), 100)\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.intervalID)\n//   }\n\n//   tick = () => {\n//     if (this.state.isRunning) {\n//       const now = Date.now()\n//       this.setState((prevState) => ({\n//         previousTime: now,\n//         elapsedTime: prevState.elapsedTime + (now - this.state.previousTime),\n//       }))\n//     }\n//   }\n\n//   handleStopWatch = () => {\n//     this.setState((prevState) => ({\n//       isRunning: !prevState.isRunning,\n//     }))\n//     if (!this.state.isRunning) {\n//       this.setState({\n//         previousTime: Date.now(),\n//       })\n//     }\n//   }\n\n//   handleReset = () => {\n//     this.setState({\n//       elapsedTime: 0,\n//     })\n//   }\n\n//   render() {\n//     const seconds = Math.floor(this.state.elapsedTime / 1000)\n//     return (\n//       <div className='stopwatch'>\n//         <h2>Stopwatch</h2>\n//         <span className='stopwatch-time'>{seconds}</span>\n//         <button onClick={this.handleStopWatch}>\n//           {' '}\n//           {this.state.isRunning ? 'Stop' : 'Start'}\n//         </button>\n//         <button onClick={this.handleReset}>Reset</button>\n//       </div>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}