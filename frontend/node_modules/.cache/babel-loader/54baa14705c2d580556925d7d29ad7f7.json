{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Scoreboard/Scoreboard.js\";\nimport React from 'react';\nimport { ReactDom } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport './Scoreboard.css';\n\nconst AddPlayerForm = ({\n  addPlayer\n}) => {\n  let playerInput = /*#__PURE__*/React.createRef();\n\n  let handleSubmit = e => {\n    e.preventDefault();\n    addPlayer(playerInput.current.value);\n    e.currentTarget.reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter a player name\",\n      ref: playerInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Add Player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_c = AddPlayerForm;\nAddPlayerForm.propTypes = {\n  addPlayer: PropTypes.func\n};\nexport default class Scoreboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      players: [{\n        name: 'Johnny Rose',\n        score: 0,\n        id: 1\n      }, {\n        name: 'Moira Rose',\n        score: 0,\n        id: 2\n      }, {\n        name: 'David Rose',\n        score: 0,\n        id: 3\n      }, {\n        name: 'Alexis Rose',\n        score: 0,\n        id: 4\n      }]\n    };\n    this.prevPlayerId = 4;\n\n    this.handleScoreChange = (index, delta) => {\n      this.setState(prevState => ({\n        score: prevState.players[index].score += delta\n      }));\n    };\n\n    this.highestScore = () => {\n      // const hello = Math.max.apply(Math, this.state.players.map(o => o.score))\n      //const hello = Math.max(...this.state.players.map(o => o.score), 0);\n      const hello = this.state.players.reduce((current, prev) => current.score > prev.score ? current : prev).score;\n\n      if (hello) {\n        return hello;\n      }\n    };\n\n    this.handleAddPlayer = name => {\n      this.setState(prevState => {\n        return {\n          players: [...prevState.players, {\n            name,\n            score: 0,\n            id: this.prevPlayerId += 1\n          }]\n        };\n      });\n    };\n\n    this.handleRemovePlayer = id => {\n      this.setState(prevState => {\n        return {\n          players: prevState.players.filter(p => p.id !== id)\n        };\n      });\n    };\n  }\n\n  render() {\n    const highScore = this.highestScore();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scoreboard\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        players: this.state.players\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), \",\", this.state.players.map((player, index) => /*#__PURE__*/_jsxDEV(Player, {\n        name: player.name,\n        score: player.score,\n        index: index,\n        removePlayer: this.handleRemovePlayer,\n        id: player.id,\n        changeScore: this.handleScoreChange,\n        isHighScore: highScore === player.score // is a player's 'score' prop equal to the high score?\n\n      }, player.id.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(AddPlayerForm, {\n        addPlayer: this.handleAddPlayer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst Counter = ({\n  index,\n  changeScore,\n  score\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"counter\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"counter-action decrement\",\n      onClick: () => changeScore(index, -1),\n      children: [' ', \"-\", ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"counter-score\",\n      children: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"counter-action increment\",\n      onClick: () => changeScore(index, +1),\n      children: [' ', \"+\", ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Counter;\nCounter.propTypes = {\n  index: PropTypes.number,\n  score: PropTypes.number,\n  changeScore: PropTypes.func\n};\n\nconst Header = ({\n  title,\n  players\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    children: [/*#__PURE__*/_jsxDEV(Stats, {\n      players: players\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stopwatch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = Header;\nHeader.propTypes = {\n  title: PropTypes.string,\n  players: PropTypes.arrayOf(PropTypes.object)\n};\nHeader.defaultProps = {\n  title: 'Scoreboard'\n};\n\nconst Icon = props => {\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: \"0 0 44 35\",\n    className: props.isHighScore ? 'is-high-score' : null,\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\",\n      transform: \"translate(0 0.301727)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n      width: \"30.4986\",\n      height: \"3.07759\",\n      transform: \"translate(6.56987 31.5603)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = Icon;\nIcon.propTypes = {\n  isHighScore: PropTypes.bool\n};\n\nclass Player extends React.PureComponent {\n  render() {\n    const {\n      name,\n      id,\n      score,\n      index,\n      removePlayer,\n      changeScore\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"player-name\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"remove-player\",\n          onClick: () => removePlayer(id),\n          children: \"\\u2716\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Icon, {\n          isHighScore: this.props.isHighScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Counter, {\n        score: score,\n        changeScore: changeScore,\n        index: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nPlayer.propTypes = {\n  changeScore: PropTypes.func,\n  removePlayer: PropTypes.func,\n  name: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  score: PropTypes.number,\n  index: PropTypes.number,\n  isHighScore: PropTypes.bool\n};\n\nconst Stats = ({\n  players\n}) => {\n  const totalPlayers = players.length;\n  const totalPoints = players.reduce((total, player) => {\n    return total + player.score;\n  }, 0);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"stats\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Players:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: totalPlayers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Total Points:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: totalPoints\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n\n_c5 = Stats;\nStats.propTypes = {\n  players: PropTypes.arrayOf(PropTypes.shape({\n    score: PropTypes.number\n  }))\n};\n\nclass Stopwatch extends React.Component {\n  constructor() {\n    super();\n\n    this.tick = () => {\n      if (this.state.isRunning) {\n        const now = Date.now();\n        this.setState(prevState => ({\n          previousTime: now,\n          elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\n        }));\n      }\n    };\n\n    this.handleStopWatch = () => {\n      this.setState(prevState => ({\n        isRunning: !prevState.isRunning\n      }));\n\n      if (!this.state.isRunning) {\n        this.setState({\n          previousTime: Date.now()\n        });\n      }\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        elapsedTime: 0\n      });\n    };\n\n    this.state = {\n      isRunning: false,\n      elapsedTime: 0,\n      previousTime: 0\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  render() {\n    const seconds = Math.floor(this.state.elapsedTime / 1000);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Stopwatch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"stopwatch-time\",\n        children: seconds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleStopWatch,\n        children: [' ', this.state.isRunning ? 'Stop' : 'Start']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nStopwatch.propTypes = {\n  isRunning: PropTypes.bool,\n  elapsedTime: PropTypes.number,\n  previousTime: PropTypes.number\n};\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"AddPlayerForm\");\n$RefreshReg$(_c2, \"Counter\");\n$RefreshReg$(_c3, \"Header\");\n$RefreshReg$(_c4, \"Icon\");\n$RefreshReg$(_c5, \"Stats\");","map":{"version":3,"sources":["/Users/qianjie/Desktop/cg4002-dashboard/frontend/src/components/Scoreboard/Scoreboard.js"],"names":["React","ReactDom","PropTypes","AddPlayerForm","addPlayer","playerInput","createRef","handleSubmit","e","preventDefault","current","value","currentTarget","reset","propTypes","func","Scoreboard","Component","state","players","name","score","id","prevPlayerId","handleScoreChange","index","delta","setState","prevState","highestScore","hello","reduce","prev","handleAddPlayer","handleRemovePlayer","filter","p","render","highScore","map","player","toString","Counter","changeScore","number","Header","title","string","arrayOf","object","defaultProps","Icon","props","isHighScore","bool","Player","PureComponent","removePlayer","isRequired","Stats","totalPlayers","length","totalPoints","total","shape","Stopwatch","constructor","tick","isRunning","now","Date","previousTime","elapsedTime","handleStopWatch","handleReset","componentDidMount","intervalID","setInterval","componentWillUnmount","clearInterval","seconds","Math","floor"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { ReactDom } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport './Scoreboard.css'\n\nconst AddPlayerForm = ({ addPlayer }) => {\n  let playerInput = React.createRef()\n\n  let handleSubmit = (e) => {\n    e.preventDefault()\n    addPlayer(playerInput.current.value)\n    e.currentTarget.reset()\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' placeholder='Enter a player name' ref={playerInput} />\n      <input type='submit' value='Add Player' />\n    </form>\n  )\n}\n\nAddPlayerForm.propTypes = {\n  addPlayer: PropTypes.func,\n}\nexport default class Scoreboard extends React.Component {\n  state = {\n    players: [\n      {\n        name: 'Johnny Rose',\n        score: 0,\n        id: 1,\n      },\n      {\n        name: 'Moira Rose',\n        score: 0,\n        id: 2,\n      },\n      {\n        name: 'David Rose',\n        score: 0,\n        id: 3,\n      },\n      {\n        name: 'Alexis Rose',\n        score: 0,\n        id: 4,\n      },\n    ],\n  }\n\n  prevPlayerId = 4\n\n  handleScoreChange = (index, delta) => {\n    this.setState((prevState) => ({\n      score: (prevState.players[index].score += delta),\n    }))\n  }\n\n  highestScore = () => {\n    // const hello = Math.max.apply(Math, this.state.players.map(o => o.score))\n    //const hello = Math.max(...this.state.players.map(o => o.score), 0);\n    const hello = this.state.players.reduce((current, prev) =>\n      current.score > prev.score ? current : prev\n    ).score\n    if (hello) {\n      return hello\n    }\n  }\n\n  handleAddPlayer = (name) => {\n    this.setState((prevState) => {\n      return {\n        players: [\n          ...prevState.players,\n          {\n            name,\n            score: 0,\n            id: (this.prevPlayerId += 1),\n          },\n        ],\n      }\n    })\n  }\n\n  handleRemovePlayer = (id) => {\n    this.setState((prevState) => {\n      return {\n        players: prevState.players.filter((p) => p.id !== id),\n      }\n    })\n  }\n\n  render() {\n    const highScore = this.highestScore()\n\n    return (\n      <div className='scoreboard'>\n        <Header players={this.state.players} />,\n        {this.state.players.map((player, index) => (\n          <Player\n            name={player.name}\n            score={player.score}\n            index={index}\n            key={player.id.toString()}\n            removePlayer={this.handleRemovePlayer}\n            id={player.id}\n            changeScore={this.handleScoreChange}\n            isHighScore={highScore === player.score} // is a player's 'score' prop equal to the high score?\n          />\n        ))}\n        <AddPlayerForm addPlayer={this.handleAddPlayer} />\n      </div>\n    )\n  }\n}\nconst Counter = ({ index, changeScore, score }) => {\n  return (\n    <div className='counter'>\n      <button\n        className='counter-action decrement'\n        onClick={() => changeScore(index, -1)}\n      >\n        {' '}\n        -{' '}\n      </button>\n      <span className='counter-score'>{score}</span>\n      <button\n        className='counter-action increment'\n        onClick={() => changeScore(index, +1)}\n      >\n        {' '}\n        +{' '}\n      </button>\n    </div>\n  )\n}\n\nCounter.propTypes = {\n  index: PropTypes.number,\n  score: PropTypes.number,\n  changeScore: PropTypes.func,\n}\nconst Header = ({ title, players }) => {\n  return (\n    <header>\n      <Stats players={players} />\n      <h1>{title}</h1>\n      <Stopwatch />\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  title: PropTypes.string,\n  players: PropTypes.arrayOf(PropTypes.object),\n}\n\nHeader.defaultProps = {\n  title: 'Scoreboard',\n}\nconst Icon = (props) => {\n  return (\n    <svg\n      viewBox='0 0 44 35'\n      className={props.isHighScore ? 'is-high-score' : null}\n    >\n      <path\n        d='M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z'\n        transform='translate(0 0.301727)'\n      />\n      <rect\n        width='30.4986'\n        height='3.07759'\n        transform='translate(6.56987 31.5603)'\n      />\n    </svg>\n  )\n}\n\nIcon.propTypes = {\n  isHighScore: PropTypes.bool,\n}\nclass Player extends React.PureComponent {\n  static propTypes = {\n    changeScore: PropTypes.func,\n    removePlayer: PropTypes.func,\n    name: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    score: PropTypes.number,\n    index: PropTypes.number,\n    isHighScore: PropTypes.bool,\n  }\n\n  render() {\n    const { name, id, score, index, removePlayer, changeScore } = this.props\n    return (\n      <div className='player'>\n        <span className='player-name'>\n          <button className='remove-player' onClick={() => removePlayer(id)}>\n            ✖\n          </button>\n\n          <Icon isHighScore={this.props.isHighScore} />\n\n          {name}\n        </span>\n\n        <Counter score={score} changeScore={changeScore} index={index} />\n      </div>\n    )\n  }\n}\nconst Stats = ({ players }) => {\n  const totalPlayers = players.length\n  const totalPoints = players.reduce((total, player) => {\n    return total + player.score\n  }, 0)\n\n  return (\n    <table className='stats'>\n      <tbody>\n        <tr>\n          <td>Players:</td>\n          <td>{totalPlayers}</td>\n        </tr>\n        <tr>\n          <td>Total Points:</td>\n          <td>{totalPoints}</td>\n        </tr>\n      </tbody>\n    </table>\n  )\n}\n\nStats.propTypes = {\n  players: PropTypes.arrayOf(\n    PropTypes.shape({\n      score: PropTypes.number,\n    })\n  ),\n}\nclass Stopwatch extends React.Component {\n  static propTypes = {\n    isRunning: PropTypes.bool,\n    elapsedTime: PropTypes.number,\n    previousTime: PropTypes.number,\n  }\n\n  constructor() {\n    super()\n    this.state = {\n      isRunning: false,\n      elapsedTime: 0,\n      previousTime: 0,\n    }\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 100)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID)\n  }\n\n  tick = () => {\n    if (this.state.isRunning) {\n      const now = Date.now()\n      this.setState((prevState) => ({\n        previousTime: now,\n        elapsedTime: prevState.elapsedTime + (now - this.state.previousTime),\n      }))\n    }\n  }\n\n  handleStopWatch = () => {\n    this.setState((prevState) => ({\n      isRunning: !prevState.isRunning,\n    }))\n    if (!this.state.isRunning) {\n      this.setState({\n        previousTime: Date.now(),\n      })\n    }\n  }\n\n  handleReset = () => {\n    this.setState({\n      elapsedTime: 0,\n    })\n  }\n\n  render() {\n    const seconds = Math.floor(this.state.elapsedTime / 1000)\n    return (\n      <div className='stopwatch'>\n        <h2>Stopwatch</h2>\n        <span className='stopwatch-time'>{seconds}</span>\n        <button onClick={this.handleStopWatch}>\n          {' '}\n          {this.state.isRunning ? 'Stop' : 'Start'}\n        </button>\n        <button onClick={this.handleReset}>Reset</button>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}